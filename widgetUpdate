// ignore_for_file: unnecessary_null_comparison, unused_element

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:toggle_switch/toggle_switch.dart';

import '../providers/pdf.dart';
import '../widgets/app_drawer.dart';
import '../widgets/common_widgets.dart';
import './pdf_creator_screen.dart';
import '../providers/drill.dart';
import '../providers/drill_jobs.dart';
import '../providers/location.dart';

class ReportItems {
  final String key;
  final String drilledRow;
  final String drilledHole;
  String drilledStartTime;
  String drilledEndTime;
  String drilledTime;
  String drilledDepth;
  String drilledLongitude;
  String drilledLatitude;
  String drilledComment;
  final DateTime dateTime;
  String drillRods;
  int drillRodsQty;
  String drillBits;
  int drillBitsQty;
  String drillCouplings;
  int drillCouplingsQty;
  int replaceDateTime;

  ReportItems(
      {required this.key,
      required this.drilledRow,
      required this.drilledHole,
      required this.drilledStartTime,
      required this.drilledEndTime,
      required this.drilledTime,
      required this.drilledDepth,
      required this.drilledLongitude,
      required this.drilledLatitude,
      required this.drilledComment,
      required this.dateTime,
      required this.drillRods,
      required this.drillRodsQty,
      required this.drillBits,
      required this.drillBitsQty,
      required this.drillCouplings,
      required this.drillCouplingsQty,
      required this.replaceDateTime});

  get mapColumns => null;

  asMap() {}

  void forEach(Null Function(dynamic key, dynamic value) param0) {}
}

class DrillSessionScreen extends StatefulWidget {
  static const routeName = '/drill_session';

  @override
  _DrillSessionScreenState createState() => _DrillSessionScreenState();
}

class _DrillSessionScreenState extends State<DrillSessionScreen> {
  List<ReportItems> drilledItemsLeft = [];
  List<ReportItems> drilledItemsRight = [];
  List<ReportItems> drilledItemsList = [];

  // var timingItem;
  int _drillJobId = 0;
  String _drillId = '';
  String _employee = '';
  String _siteType = '';
  String _siteTypeOther = '';
  int _drillSize = 0;
  int _spacing = 0;
  int _burden = 0;
  String _bench = '';
  int _submittedDateTime = 0;
  String _completedChecklist = '';
  int _rowCount = 1;
  int _holeCounter = 0;
  int _row = 1;
  int _hole = 100;

  int _firstChecklist = 0;
  int _secondChecklist = 0;
  int _thirdChecklist = 0;
  int _fourthChecklist = 0;
  int _fifthChecklist = 0;
  int _machineHours = 0;
  String _skipCheckList = '';
  String _skipCheckListReason = '';

  // side variables
  int _side = 0; // Left default = 0, Right = 1;
  // Check if side has changed
  var sideUpdate = 'no';

  // Check if holeCounter is updated.
  var holeCounterUpdate = 'no';
  bool _holesSet = false;
  bool _rowsSet = false;
  bool _rowsAndHolesAdded = false;
  int _currentHole = 0;
  int _currentRow = 0;
  bool _singleHoleSet = false;
  bool _singleRowSet = false;
  var holeUpdate = 'no';
  var rowUpdate = 'no';

  int _prevHole = 0;
  // double _prevDepth = 0; // _depth;
  // double _prevDepthAchieved = 0; // _depthAchieved;
  // String _prevStartDateTime = '0'; // _startDateTime;
  // String _prevEndDateTime = '0'; // _endDateTime;
  // int _prevTotalDrillTime = 0; // _totalDrillTime;
  // String _prevCurrentTotalDrillTime = '00:00:00'; // _currentTotalDrillTime;
  // double _prevLongitude = 0; // _longitude;
  // double _prevLatitude = 0; // _latitude;
  // String _prevActive = 'Yes'; // _active;
  // String _prevSubmitted = 'No'; //_submitted;
  // String _prevComment = ''; // _currentComment;
  // String _prevDrillRods = ''; // _drillRods;
  // int _prevDrillRodsQty = 0; // _drillRodsQty;
  // String _prevDrillBits = ''; // _drillBits;
  // int _prevDrillBitsQty = 0; // _drillBitsQty;
  // String _prevDrillCouplings = ''; // _drillCouplings;
  // int _prevDrillCouplingsQty = 0; // _drillCouplingsQty;
  // int _prevReplaceDateTime = 0; // _replaceDateTime;

  int _holeDecrementSelected = 0;
  int _holeIncrementSelected = 0;
  int _rowSelected = 0;
  int _storeHoleDecrementSelected = 0;
  int _storeHoleIncrementSelected = 0;
  int _storeRowSelected = 0;
  bool _holeIncDecUpdate = true;
  // bool _holeIncDecUpdate = false;

  var locationUpdate = 'no';

  double _latitude = 0;
  double _longitude = 0;
  double _currentLatitude = 0;
  double _currentLongitude = 0;

  String _currentDrillJobItemsId = '';

  double _depth = 0;
  double _depthAchieved = 0;
  var depthUpdate = 'no';
  var achievedDepthUpdate = 'no';

  String _active = 'Yes';
  String _startDateTime = '0';
  //  = DateTime.now().millisecondsSinceEpoch.toString().substring(0, 10);
  String _endDateTime = '0';
  //  = DateTime.now().millisecondsSinceEpoch.toString().substring(0, 10);

  final holeCounterBox = FocusNode();
  final sideBox = FocusNode();
  final rowBox = FocusNode();
  final holeBox = FocusNode();
  final locationBox = FocusNode();
  final timerBox = FocusNode();

  int _totalDrillTime = 0;
  String _currentTotalDrillTime = '00:00:00';
  String _submitted = '';
  String _drillRods = '';
  int _drillRodsQty = 0;
  String _drillBits = '';
  int _drillBitsQty = 0;
  String _drillCouplings = '';
  int _drillCouplingsQty = 0;
  int _replaceDateTime = 0;

  final depthBox = FocusNode();
  final achievedDepthBox = FocusNode();
  final _defDepthController = TextEditingController();
  final _defRowController = TextEditingController();

  final _drillRodsController = TextEditingController();
  final _drillRodsQtyController = TextEditingController();
  final _drillBitsController = TextEditingController();
  final _drillBitsQtyController = TextEditingController();
  final _drillCouplingsController = TextEditingController();
  final _drillCouplingsQtyController = TextEditingController();

  bool _currentlyDrilling = false;
  bool _pausedDrilling = false;
  bool _decrement = false;
  bool _attemptedToGetDrillJobItems = false;
  bool busyUpdating = false;

  List holeItems = <String>[];
  List holeItemsReversed = <String>[];

  String _currentComment = '';
  var _isLoading = true;

  List holeItemsOff = <String>[
    // '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
  ];

  List rowItems = <String>[];

  List drilledItemsRightAdded = <String>[];
  List drilledItemsLeftAdded = <String>[];

  List rowItemsOff = <String>[
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
  ];

  Future addRows(
      addDrillJobItemsId,
      addDrillJobId,
      addSide,
      addRowCount,
      addHoles,
      addDepth,
      addAchievedDepth,
      addStartDateTime,
      addEndDateTime,
      addTotalDrillTime,
      addCurrentTotalDrillTime,
      addLongitude,
      addLatitude,
      addActive,
      addSubmitted,
      addComment,
      addDrillRods,
      addDrillRodsQty,
      addDrillBits,
      addDrillBitsQty,
      addDrillCouplings,
      addDrillCouplingsQty,
      addReplaceDateTime,
      addFirstHoles) async {
      // print ('BEFORE UPDATE tblDrillJobItems: addRows(addDrillJobItemsId, addDrillJobId, addSide, addRowCount, addHoles, addDepth, addStartDateTime, addEndDateTime, addTotalDrillTime, addCurrentTotalDrillTime, addLongitude, addLatitude, addActive, addSubmitted, addComment, addDrillRods, addDrillRodsQty, addDrillBits, addDrillBitsQty, addDrillCouplings, addDrillCouplingsQty, addReplaceDateTime, addFirstHoles');
      // print ('BEFORE UPDATE tblDrillJobItems: addRows(${addDrillJobItemsId}, ${addDrillJobId}, ${addSide}, ${addRowCount}, ${addHoles}, ${addDepth}, ${addStartDateTime}, ${addEndDateTime}, ${addTotalDrillTime}, ${addCurrentTotalDrillTime}, ${addLongitude}, ${addLatitude}, ${addActive}, ${addSubmitted}, ${addComment}, ${addDrillRods}, ${addDrillRodsQty}, ${addDrillBits}, ${addDrillBitsQty}, ${addDrillCouplings}, ${addDrillCouplingsQty}, ${addReplaceDateTime}, ${addFirstHoles}');
      //   if (!addFirstHoles) {
      //     print('ADDFIRSTHOLES RESET START: addFirstHoles: ${addFirstHoles}, addHoles: ${addHoles}, _prevHole: ${_prevHole}');
      //     if (addHoles != _prevHole && _prevHole != 0) {
      //     _depthAchieved = 0;
      //     _startDateTime = '0';
      //     _endDateTime = '0';
      //     _totalDrillTime = 0;
      //     _currentTotalDrillTime = '00:00:00';
      //     _longitude = 0;
      //     _latitude = 0;
      //     _active = 'Yes';
      //     _submitted = 'No';
      //     _currentComment = '';
      //     _drillRods = '';
      //     _drillRodsQty = 0;
      //     _drillBits = '';
      //     _drillBitsQty = 0;
      //     _drillCouplings = '';
      //     _drillCouplingsQty = 0;
      //     _replaceDateTime = 0;
      //     addAchievedDepth = _depthAchieved;
      //     addStartDateTime = int.parse(_startDateTime);
      //     addEndDateTime = int.parse(_endDateTime);
      //     addTotalDrillTime = _totalDrillTime;
      //     addCurrentTotalDrillTime = _currentTotalDrillTime;
      //     addLongitude = _longitude.toString();
      //     addLatitude = _latitude.toString();
      //     addActive = _active;
      //     addSubmitted = _submitted;
      //     addComment = _currentComment;
      //     addDrillRods = _drillRods;
      //     addDrillRodsQty = _drillRodsQty;
      //     addDrillBits = _drillBits;
      //     addDrillBitsQty = _drillBitsQty;
      //     addDrillCouplings = _drillCouplings;
      //     addDrillCouplingsQty = _drillCouplingsQty;
      //     addReplaceDateTime = _replaceDateTime;
      //   }
      //   }
      //   print ('AFTER UPDATE tblDrillJobItems: addRows(addDrillJobItemsId, addDrillJobId, addSide, addRowCount, addHoles, addDepth, addStartDateTime, addEndDateTime, addTotalDrillTime, addCurrentTotalDrillTime, addLongitude, addLatitude, addActive, addSubmitted, addComment, addDrillRods, addDrillRodsQty, addDrillBits, addDrillBitsQty, addDrillCouplings, addDrillCouplingsQty, addReplaceDateTime, addFirstHoles');
      //   print ('AFTER UPDATE tblDrillJobItems: addRows(${addDrillJobItemsId}, ${addDrillJobId}, ${addSide}, ${addRowCount}, ${addHoles}, ${addDepth}, ${addStartDateTime}, ${addEndDateTime}, ${addTotalDrillTime}, ${addCurrentTotalDrillTime}, ${addLongitude}, ${addLatitude}, ${addActive}, ${addSubmitted}, ${addComment}, ${addDrillRods}, ${addDrillRodsQty}, ${addDrillBits}, ${addDrillBitsQty}, ${addDrillCouplings}, ${addDrillCouplingsQty}, ${addReplaceDateTime}, ${addFirstHoles}');
    //   _prevHole = addHoles;
    // if (_prevDepth > 0)
    //   _depth = addDepth;
    // if (_prevDepthAchieved > 0)
    //   _depthAchieved = addAchievedDepth;
    // if (_prevStartDateTime != '')
    //   _startDateTime = addStartDateTime;
    // if (_prevEndDateTime != '')
    //   _endDateTime = addEndDateTime;
    // if (_prevTotalDrillTime > 0)
    //   _totalDrillTime = addTotalDrillTime;
    // if (_prevCurrentTotalDrillTime != '00:00:00')
    //   _currentTotalDrillTime = addCurrentTotalDrillTime;
    // if (_prevLongitude > 0)
    //   _longitude = addLongitude;
    // if (_prevLatitude > 0)
    //   _latitude = addLatitude;
    // if (_prevActive != 'Yes')
    //   _active = addActive;
    // if (_prevSubmitted != 'No')
    //   _submitted = addSubmitted;
    // if (_prevComment != '')
    //   _currentComment = addComment;
    // if (_prevDrillRods != '')
    //   _drillRods = addDrillRods;
    // if (_prevDrillRodsQty > 0)
    //   _drillRodsQty = addDrillRodsQty;
    // if (_prevDrillBits != '')
    //   _drillBits = addDrillBits;
    // if (_prevDrillBitsQty > 0)
    //   _drillBitsQty = addDrillBitsQty;
    // if (_prevDrillCouplings != '')
    //   _drillCouplings = addDrillCouplings;
    // if (_prevDrillCouplingsQty > 0)
    //   _drillCouplingsQty = addDrillCouplingsQty;
    // if (_prevReplaceDateTime > 0)
    //   _replaceDateTime = addReplaceDateTime;
    // await _GetDrillJobDataItems();
    print('ABOUT TO UPDATE LOCATION: ${addLongitude}, ${addLatitude}');
    // if (!busyUpdating) {
    //   busyUpdating = true;
      final timingItem = Provider.of<DrillJobs>(context, listen: false);

      if (addDrillJobItemsId == null && _currentDrillJobItemsId == (addRowCount.toString() + addHoles.toString())) {
        addDrillJobItemsId = _currentDrillJobItemsId;
      }

      timingItem.addDrillJobItems(
        addDrillJobItemsId,
        addDrillJobId,
        addSide,
        addRowCount,
        addHoles,
        addDepth,
        addAchievedDepth,
        addStartDateTime,
        addEndDateTime,
        addTotalDrillTime,
        addLongitude,
        addLatitude,
        addActive,
        addSubmitted,
        addComment,
        addDrillRods,
        addDrillRodsQty,
        addDrillBits,
        addDrillBitsQty,
        addDrillCouplings,
        addDrillCouplingsQty,
        addReplaceDateTime);
      addDrillJobItemsId = addRowCount.toString() + addHoles.toString();

      final timingItemUpdate = await Provider.of<DrillJobTiming>(context, listen: false);

      timingItemUpdate.addTimingItem(
        addDrillJobItemsId,
        addDrillJobId,
        addSide,
        addRowCount,
        addHoles,
        addDepth,
        addAchievedDepth,
        addStartDateTime,
        addEndDateTime,
        addTotalDrillTime,
        addLongitude,
        addLatitude,
        addActive,
        addSubmitted,
        addComment,
        addDrillRods,
        addDrillRodsQty,
        addDrillBits,
        addDrillBitsQty,
        addDrillCouplings,
        addDrillCouplingsQty,
        addReplaceDateTime);

      // timingItemUpdate.itemsTiming.forEach((key, value) {
      timingItemUpdate.itemsTiming.forEach((key, value) {
        // print('SITEMVA DRILLEDITEMSLEFT[LEFTINDEX]: key: ${key}, !holeItems.contains(value.holes.toString()): ${!holeItems.contains(value.holes.toString())} value.holes.toString(): ${value.holes.toString()}, value.totalDrillTime: ${value.totalDrillTime.toString()}');
        if (addSide == 0) { // || value.side == 0) {
          if (value.drillJobId == _drillJobId) {
            // _GetDrillJobDataItems();
            // print('SITEMVA holeItems: ${holeItems.toString()}, value.holes: ${value.holes}, value.holes.toString(): ${value.holes.toString()}');
            if (_rowCount == 1 && _holeCounter == 0 && _attemptedToGetDrillJobItems) {
              print('DRILLEDITEMSLEFT[LEFTINDEX]: value.holes.toString(): ${value.holes.toString()}, value.totalDrillTime: ${value.totalDrillTime}');

              if (!holeItems.contains(value.holes.toString()) && (holeItems.isEmpty || int.parse(value.holes.toString()) >= int.parse(holeItems.first))) {
                if (value.totalDrillTime <= 0) {
                  setState(() {
                    holeItems.add(value.holes.toString());
                    print('E SITEMVALUE SETSIDE ADD: value.holes.toString(): ${value.holes.toString()}, holeItems.first: ${holeItems.first}');
                    print('E SITEMVALUE SETSIDE ADD: holeItems: ${holeItems.toString()}');
                  });
                }
              } else {
                if (value.totalDrillTime > 0) {
                  setState(() {
                    holeItems.remove(value.holes.toString());
                    print('E SITEMVALUE SETSIDE REMOVE: value.holes.toString(): ${value.holes.toString()}, !holeItems.contains(value.holes.toString()): ${!holeItems.contains(value.holes.toString())}');
                    
                  });
                }
              }
              if (!holeItemsReversed.contains(value.holes.toString())) {
                if (value.totalDrillTime <= 0) {
                  setState(() {
                    holeItemsReversed.insert(0, value.holes.toString());
                  });
                }
              } else {
                if (value.totalDrillTime > 0) {
                 setState(() {
                    holeItemsReversed.remove(value.holes.toString());
                    });
                }
              }
              if (!rowItems.contains(value.rowCount.toString())) {
                setState(() {
                  rowItems.add(value.rowCount.toString());
                });
              }
            }

            if (_holeIncDecUpdate) {
              print('CHECKTHIS rowCount: ${value.rowCount}\n');
              print('CHECKTHIS holes: ${value.holes}\n');
              // print('CHECKTHIS drilledTime: ${fetchedDrillTime.toString()}\n');
              print('CHECKTHIS drilledDepth: ${value.achievedDepth.toString()}\n');
              print('CHECKTHIS drilledLongitude: ${value.longitude.toString()}\n');
              print('CHECKTHIS drilledLatitude: ${value.latitude.toString()}\n');
              print('CHECKTHIS drilledComment: ${value.comment.toString()}\n');
              print('CHECKTHIS dateTime: ${DateTime.now()}\n');
              print('CHECKTHIS drillRods: ${value.drillRods.toString()}\n');
              print('CHECKTHIS drillRodsQty: ${value.drillRodsQty}\n');
              print('CHECKTHIS drillBits: ${value.drillBits.toString()}\n');
              print('CHECKTHIS drillBitsQty: ${value.drillBitsQty}\n');
              print('CHECKTHIS drillCouplings: ${value.drillCouplings.toString()}\n');
              print('CHECKTHIS drillCouplingsQty: ${value.drillCouplingsQty}\n');
              print('CHECKTHIS replaceDateTime: ${value.replaceDateTime}\n');
              String rowHole = addSide.toString() + addRowCount.toString() + addHoles.toString();
              print('TK holeItems: rowHole: ${rowHole}, drilledItemsLeftAdded.contains(rowHole): ${drilledItemsLeftAdded.contains(rowHole)}, drilledItemsLeft.contains(rowHole): ${drilledItemsLeft.contains(rowHole)}');
              if (!drilledItemsLeftAdded.contains(rowHole)) {
                // String row = value.rowCount.toString();
                // String hole = value.holes.toString();
                // String fetchedDrillTime = "${(value.totalDrillTime / 60000).toInt().toString().padLeft(2, '0')}:${((value.totalDrillTime / 1000).toInt() % 60).toString().padLeft(2, '0')}:${(value.totalDrillTime % 100).toString().padLeft(2, '0')}";
                print('TK holeItems: A addTotalDrillTime: ${addTotalDrillTime} > 0');
                if (addTotalDrillTime > 0) {
                // if (addCurrentTotalDrillTime > 0) {
                  print('TK holeItems: B addCurrentTotalDrillTime: ${addCurrentTotalDrillTime} > 0');
                  print('TK holeItems: drilledItemsLeft.add(ReportItems(key: ${rowHole}, drilledRow: ${addRowCount.toString()}, drilledHole: ${addHoles.toString()}, drilledTime: ${addCurrentTotalDrillTime.toString()}, drilledDepth: ${addAchievedDepth.toString()}, drilledLongitude: ${addLongitude.toString()}, drilledLatitude: ${addLatitude.toString()}, drilledComment: ${addComment.toString()}, dateTime: ${DateTime.now()}, ))');
                  drilledItemsLeft.add(ReportItems(
                    key: rowHole,
                    drilledRow: addRowCount.toString(),
                    drilledHole: addHoles.toString(),
                    drilledStartTime: addStartDateTime.toString(),
                    drilledEndTime: addEndDateTime.toString(),
                    drilledTime: addCurrentTotalDrillTime.toString(),
                    drilledDepth: addAchievedDepth.toString(),
                    drilledLongitude: addLongitude.toString(),
                    drilledLatitude: addLatitude.toString(),
                    drilledComment: addComment.toString(),
                    dateTime: DateTime.now(),
                    drillRods: addDrillRods.toString(),
                    drillRodsQty: addDrillRodsQty,
                    drillBits: addDrillBits.toString(),
                    drillBitsQty: addDrillBitsQty,
                    drillCouplings: addDrillCouplings.toString(),
                    drillCouplingsQty: addDrillCouplingsQty,
                    replaceDateTime: addReplaceDateTime));
                  drilledItemsLeftAdded.add(rowHole);
                  drilledItemsList.add(ReportItems(
                    key: rowHole,
                    drilledRow: addRowCount.toString(),
                    drilledHole: addHoles.toString(),
                    drilledStartTime: addStartDateTime.toString(),
                    drilledEndTime: addEndDateTime.toString(),
                    drilledTime: addCurrentTotalDrillTime.toString(),
                    drilledDepth: addAchievedDepth.toString(),
                    drilledLongitude: addLongitude.toString(),
                    drilledLatitude: addLatitude.toString(),
                    drilledComment: addComment.toString(),
                    dateTime: DateTime.now(),
                    drillRods: addDrillRods.toString(),
                    drillRodsQty: addDrillRodsQty,
                    drillBits: addDrillBits.toString(),
                    drillBitsQty: addDrillBitsQty,
                    drillCouplings: addDrillCouplings.toString(),
                    drillCouplingsQty: addDrillCouplingsQty,
                    replaceDateTime: addReplaceDateTime));
                  setState(() {
                    if (_currentRow == 0 && !_rowsSet && _currentHole == 0 && !_holesSet) {
                      _currentRow = value.rowCount;
                      _rowsSet = true;
                      _currentHole = value.holes;
                      _holesSet = true;
                      if (_decrement) {
                        _holeDecrementSelected = _currentHole;
                      } else {
                        _holeIncrementSelected = _currentHole;
                      }
                      _rowSelected = _currentRow;
                    }
                  });
                }
              } else {
                int leftIndex = drilledItemsLeft.indexWhere((e) => e.key == rowHole);
                int totListIndex = drilledItemsList.indexWhere((e) => e.key == rowHole);
                print('DRILLEDITEMSLEFT[LEFTINDEX]: addTotalDrillTime: ${drilledItemsLeft[leftIndex].drillBits}');
                if (addTotalDrillTime > 0 || (drilledItemsLeft[leftIndex].drilledTime != '0' && drilledItemsLeft[leftIndex].drilledTime != '0')) {
                // if (addCurrentTotalDrillTime > 0) {
                  if (drilledItemsLeft[leftIndex].drilledComment != addComment.toString() && addComment.toString() != '') {
                    print('DRILLEDITEMSLEFT[LEFTINDEX]: addComment.toString(): ${addComment.toString()}, drilledItemsLeft[leftIndex].drilledComment: ${drilledItemsLeft[leftIndex].drilledComment}');
                    drilledItemsLeft[leftIndex].drilledComment = addComment.toString();
                    drilledItemsList[totListIndex].drilledComment = addComment.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drilledTime != addCurrentTotalDrillTime.toString() &&
                  addCurrentTotalDrillTime.toString() != '' &&
                  addCurrentTotalDrillTime.toString() != '0' &&
                  addCurrentTotalDrillTime.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].drilledTime = addCurrentTotalDrillTime.toString();
                    drilledItemsList[totListIndex].drilledTime = addCurrentTotalDrillTime.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drilledDepth != addAchievedDepth.toString() &&
                  addAchievedDepth.toString() != '' &&
                  addAchievedDepth.toString() != '0' &&
                  addAchievedDepth.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].drilledDepth = addAchievedDepth.toString();
                    drilledItemsList[totListIndex].drilledDepth = addAchievedDepth.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drilledLongitude != addLongitude.toString() &&
                  addLongitude.toString() != '' &&
                  addLongitude.toString() != '0' &&
                  addLongitude.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].drilledLongitude = addLongitude.toString();
                    drilledItemsList[totListIndex].drilledLongitude = addLongitude.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drilledLatitude != addLatitude.toString() &&
                  addLatitude.toString() != '' &&
                  addLatitude.toString() != '0' &&
                  addLatitude.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].drilledLatitude = addLatitude.toString();
                    drilledItemsList[totListIndex].drilledLatitude = addLatitude.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drillRods != addDrillRods.toString() &&
                  addDrillRods.toString() != '' &&
                  addDrillRods.toString() != '0' &&
                  addDrillRods.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].drillRods = addDrillRods.toString();
                    drilledItemsList[totListIndex].drillRods = addDrillRods.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drillRodsQty != addDrillRodsQty && addDrillRodsQty != 0) {
                    drilledItemsLeft[leftIndex].drillRodsQty = addDrillRodsQty;
                    drilledItemsList[totListIndex].drillRodsQty = addDrillRodsQty;
                  }
                  if (drilledItemsLeft[leftIndex].drillBits != addDrillBits.toString() &&
                  addDrillBits.toString() != '' &&
                  addDrillBits.toString() != '0' &&
                  addDrillBits.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].drillBits = addDrillBits.toString();
                    drilledItemsList[totListIndex].drillBits = addDrillBits.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drillBitsQty != addDrillBitsQty && addDrillBitsQty != 0) {
                    drilledItemsLeft[leftIndex].drillBitsQty = addDrillBitsQty;
                    drilledItemsList[totListIndex].drillBitsQty = addDrillBitsQty;
                  }
                  if (drilledItemsLeft[leftIndex].drillCouplings != addDrillCouplings.toString() &&
                  addDrillCouplings.toString() != '' &&
                  addDrillCouplings.toString() != '0' &&
                  addDrillCouplings.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].drillCouplings = addDrillCouplings.toString();
                    drilledItemsList[totListIndex].drillCouplings = addDrillCouplings.toString();
                  }
                  if (drilledItemsLeft[leftIndex].drillCouplingsQty != addDrillCouplingsQty && addDrillCouplingsQty != 0) {
                    drilledItemsLeft[leftIndex].drillCouplingsQty = addDrillCouplingsQty;
                    drilledItemsList[totListIndex].drillCouplingsQty = addDrillCouplingsQty;
                  }
                  if (drilledItemsLeft[leftIndex].replaceDateTime != addReplaceDateTime.toString() &&
                  addReplaceDateTime.toString() != '' &&
                  addReplaceDateTime.toString() != '0' &&
                  addReplaceDateTime.toString() != '0.0') {
                    drilledItemsLeft[leftIndex].replaceDateTime = addReplaceDateTime;
                    drilledItemsList[totListIndex].replaceDateTime = addReplaceDateTime;
                  }
                  print('TK holeItems: After drilledItemsLeft[tkCheck]: ${drilledItemsLeft[leftIndex].drilledComment}');
                }
              }
            }
          }
          setState(() {
            _holeIncDecUpdate = false;
          });
        } else if (addSide == 1) {
          if (value.drillJobId == _drillJobId) {
            // _GetDrillJobDataItems();
            if (_rowCount == 1 && _holeCounter == 0 && _attemptedToGetDrillJobItems) {
              print('DRILLEDITEMSLEFT[LEFTINDEX]: value.holes.toString(): ${value.holes.toString()}, value.totalDrillTime: ${value.totalDrillTime}');
              // if (!holeItems.contains(value.holes.toString()) && value.holes >= holeItems.first) {
              if (!holeItems.contains(value.holes.toString()) && (holeItems.isEmpty || int.parse(value.holes.toString()) >= int.parse(holeItems.first))) {
                if (value.totalDrillTime <= 0) {
                  setState(() {
                    holeItems.add(value.holes.toString());
                    print('E SITEMVALUE SETSIDE ADD: value.holes.toString(): ${value.holes.toString()}, holeItems.first: ${holeItems.first}');
                    print('E SITEMVALUE SETSIDE ADD: holeItems: ${holeItems.toString()}');
                  });
                }
              } else {
                if (value.totalDrillTime > 0) {
                  setState(() {
                    holeItems.remove(value.holes.toString());
                    print('E SITEMVALUE SETSIDE REMOVE: value.holes.toString(): ${value.holes.toString()}, !holeItems.contains(value.holes.toString()): ${!holeItems.contains(value.holes.toString())}');
                  });
                }
              }
              if (!holeItemsReversed.contains(value.holes.toString())) {
                if (value.totalDrillTime <= 0) {
                  setState(() {
                    holeItemsReversed.insert(0, value.holes.toString());
                  });
                }
              } else {
                if (value.totalDrillTime > 0) {
                 setState(() {
                    holeItemsReversed.remove(value.holes.toString());
                    });
                }
              }
              if (!rowItems.contains(value.rowCount.toString())) {
                setState(() {
                  rowItems.add(value.rowCount.toString());
                });
              }
            }

            if (_holeIncDecUpdate) {
              print('CHECKTHIS rowCount: ${value.rowCount}\n');
              print('CHECKTHIS holes: ${value.holes}\n');
              // print('CHECKTHIS drilledTime: ${fetchedDrillTime.toString()}\n');
              print('CHECKTHIS drilledDepth: ${value.achievedDepth.toString()}\n');
              print('CHECKTHIS drilledLongitude: ${value.longitude.toString()}\n');
              print('CHECKTHIS drilledLatitude: ${value.latitude.toString()}\n');
              print('CHECKTHIS drilledComment: ${value.comment.toString()}\n');
              print('CHECKTHIS dateTime: ${DateTime.now()}\n');
              print('CHECKTHIS drillRods: ${value.drillRods.toString()}\n');
              print('CHECKTHIS drillRodsQty: ${value.drillRodsQty}\n');
              print('CHECKTHIS drillBits: ${value.drillBits.toString()}\n');
              print('CHECKTHIS drillBitsQty: ${value.drillBitsQty}\n');
              print('CHECKTHIS drillCouplings: ${value.drillCouplings.toString()}\n');
              print('CHECKTHIS drillCouplingsQty: ${value.drillCouplingsQty}\n');
              print('CHECKTHIS replaceDateTime: ${value.replaceDateTime}\n');
              String rowHole = addSide.toString() + addRowCount.toString() + addHoles.toString();
              print('TK holeItems: rowHole: ${rowHole}, drilledItemsRightAdded.contains(rowHole): ${drilledItemsRightAdded.contains(rowHole)}, drilledItemsRight.contains(rowHole): ${drilledItemsRight.contains(rowHole)}');
              if (!drilledItemsRightAdded.contains(rowHole)) {
                // String row = value.rowCount.toString();
                // String hole = value.holes.toString();
                // String fetchedDrillTime = "${(value.totalDrillTime / 60000).toInt().toString().padLeft(2, '0')}:${((value.totalDrillTime / 1000).toInt() % 60).toString().padLeft(2, '0')}:${(value.totalDrillTime % 100).toString().padLeft(2, '0')}";
                print('TK holeItems: A addTotalDrillTime: ${addTotalDrillTime} > 0');
                if (addTotalDrillTime > 0) {
                // if (addCurrentTotalDrillTime > 0) {
                  print('TK holeItems: B addCurrentTotalDrillTime: ${addCurrentTotalDrillTime} > 0');
                  print('TK holeItems: drilledItemsRight.add(ReportItems(key: ${rowHole}, drilledRow: ${addRowCount.toString()}, drilledHole: ${addHoles.toString()}, drilledTime: ${addCurrentTotalDrillTime.toString()}, drilledDepth: ${addAchievedDepth.toString()}, drilledLongitude: ${addLongitude.toString()}, drilledLatitude: ${addLatitude.toString()}, drilledComment: ${addComment.toString()}, dateTime: ${DateTime.now()}, ))');
                  drilledItemsRight.add(ReportItems(
                    key: rowHole,
                    drilledRow: addRowCount.toString(),
                    drilledHole: addHoles.toString(),
                    drilledStartTime: addStartDateTime.toString(),
                    drilledEndTime: addEndDateTime.toString(),
                    drilledTime: addCurrentTotalDrillTime.toString(),
                    drilledDepth: addAchievedDepth.toString(),
                    drilledLongitude: addLongitude.toString(),
                    drilledLatitude: addLatitude.toString(),
                    drilledComment: addComment.toString(),
                    dateTime: DateTime.now(),
                    drillRods: addDrillRods.toString(),
                    drillRodsQty: addDrillRodsQty,
                    drillBits: addDrillBits.toString(),
                    drillBitsQty: addDrillBitsQty,
                    drillCouplings: addDrillCouplings.toString(),
                    drillCouplingsQty: addDrillCouplingsQty,
                    replaceDateTime: addReplaceDateTime));
                  drilledItemsRightAdded.add(rowHole);
                  drilledItemsList.add(ReportItems(
                    key: rowHole,
                    drilledRow: addRowCount.toString(),
                    drilledHole: addHoles.toString(),
                    drilledStartTime: addStartDateTime.toString(),
                    drilledEndTime: addEndDateTime.toString(),
                    drilledTime: addCurrentTotalDrillTime.toString(),
                    drilledDepth: addAchievedDepth.toString(),
                    drilledLongitude: addLongitude.toString(),
                    drilledLatitude: addLatitude.toString(),
                    drilledComment: addComment.toString(),
                    dateTime: DateTime.now(),
                    drillRods: addDrillRods.toString(),
                    drillRodsQty: addDrillRodsQty,
                    drillBits: addDrillBits.toString(),
                    drillBitsQty: addDrillBitsQty,
                    drillCouplings: addDrillCouplings.toString(),
                    drillCouplingsQty: addDrillCouplingsQty,
                    replaceDateTime: addReplaceDateTime));
                  setState(() {
                    if (_currentRow == 0 && !_rowsSet && _currentHole == 0 && !_holesSet) {
                      _currentRow = value.rowCount;
                      _rowsSet = true;
                      _currentHole = value.holes;
                      _holesSet = true;
                      if (_decrement) {
                        _holeDecrementSelected = _currentHole;
                      } else {
                        _holeIncrementSelected = _currentHole;
                      }
                      _rowSelected = _currentRow;
                    }
                  });
                }
              } else {
                int rightIndex = drilledItemsRight.indexWhere((e) => e.key == rowHole);
                int totListIndex = drilledItemsList.indexWhere((e) => e.key == rowHole);
                if (addTotalDrillTime > 0 || drilledItemsRight[rightIndex].drilledTime != '0') {
                // if (addCurrentTotalDrillTime > 0) {
                  if (drilledItemsRight[rightIndex].drilledComment != addComment.toString() && addComment.toString() != '') {
                    drilledItemsRight[rightIndex].drilledComment = addComment.toString();
                    drilledItemsList[totListIndex].drilledComment = addComment.toString();
                  }
                  if (drilledItemsRight[rightIndex].drilledTime != addCurrentTotalDrillTime.toString() &&
                  addCurrentTotalDrillTime.toString() != '' &&
                  addCurrentTotalDrillTime.toString() != '0' &&
                  addCurrentTotalDrillTime.toString() != '0.0') {
                    drilledItemsRight[rightIndex].drilledTime = addCurrentTotalDrillTime.toString();
                    drilledItemsList[totListIndex].drilledTime = addCurrentTotalDrillTime.toString();
                  }
                  if (drilledItemsRight[rightIndex].drilledDepth != addAchievedDepth.toString() &&
                  addAchievedDepth.toString() != '' &&
                  addAchievedDepth.toString() != '0' &&
                  addAchievedDepth.toString() != '0.0') {
                    drilledItemsRight[rightIndex].drilledDepth = addAchievedDepth.toString();
                    drilledItemsList[totListIndex].drilledDepth = addAchievedDepth.toString();
                  }
                  if (drilledItemsRight[rightIndex].drilledLongitude != addLongitude.toString() &&
                  addLongitude.toString() != '' &&
                  addLongitude.toString() != '0' &&
                  addLongitude.toString() != '0.0') {
                    drilledItemsRight[rightIndex].drilledLongitude = addLongitude.toString();
                    drilledItemsList[totListIndex].drilledLongitude = addLongitude.toString();
                  }
                  if (drilledItemsRight[rightIndex].drilledLatitude != addLatitude.toString() &&
                  addLatitude.toString() != '' &&
                  addLatitude.toString() != '0' &&
                  addLatitude.toString() != '0.0') {
                    drilledItemsRight[rightIndex].drilledLatitude = addLatitude.toString();
                    drilledItemsList[totListIndex].drilledLatitude = addLatitude.toString();
                  }
                  if (drilledItemsRight[rightIndex].drillRods != addDrillRods.toString() &&
                  addDrillRods.toString() != '' &&
                  addDrillRods.toString() != '0' &&
                  addDrillRods.toString() != '0.0') {
                    drilledItemsRight[rightIndex].drillRods = addDrillRods.toString();
                    drilledItemsList[totListIndex].drillRods = addDrillRods.toString();
                  }
                  if (drilledItemsRight[rightIndex].drillRodsQty != addDrillRodsQty && addDrillRodsQty != 0) {
                    drilledItemsRight[rightIndex].drillRodsQty = addDrillRodsQty;
                    drilledItemsList[totListIndex].drillRodsQty = addDrillRodsQty;
                  }
                  if (drilledItemsRight[rightIndex].drillBits != addDrillBits.toString() &&
                  addDrillBits.toString() != '' &&
                  addDrillBits.toString() != '0' &&
                  addDrillBits.toString() != '0.0') {
                    drilledItemsRight[rightIndex].drillBits = addDrillBits.toString();
                    drilledItemsList[totListIndex].drillBits = addDrillBits.toString();
                  }
                  if (drilledItemsRight[rightIndex].drillBitsQty != addDrillBitsQty && addDrillBitsQty != 0) {
                    drilledItemsRight[rightIndex].drillBitsQty = addDrillBitsQty;
                    drilledItemsList[totListIndex].drillBitsQty = addDrillBitsQty;
                  }
                  if (drilledItemsRight[rightIndex].drillCouplings != addDrillCouplings.toString() &&
                  addDrillCouplings.toString() != '' &&
                  addDrillCouplings.toString() != '0' &&
                  addDrillCouplings.toString() != '0.0') {
                    drilledItemsRight[rightIndex].drillCouplings = addDrillCouplings.toString();
                    drilledItemsList[totListIndex].drillCouplings = addDrillCouplings.toString();
                  }
                  if (drilledItemsRight[rightIndex].drillCouplingsQty != addDrillCouplingsQty && addDrillCouplingsQty != 0) {
                    drilledItemsRight[rightIndex].drillCouplingsQty = addDrillCouplingsQty;
                    drilledItemsList[totListIndex].drillCouplingsQty = addDrillCouplingsQty;
                  }
                  if (drilledItemsRight[rightIndex].replaceDateTime != addReplaceDateTime.toString() &&
                  addReplaceDateTime.toString() != '' &&
                  addReplaceDateTime.toString() != '0' &&
                  addReplaceDateTime.toString() != '0.0') {
                    drilledItemsRight[rightIndex].replaceDateTime = addReplaceDateTime;
                    drilledItemsList[totListIndex].replaceDateTime = addReplaceDateTime;
                  }
                  print('TK holeItems: After drilledItemsRight[tkCheck]: ${drilledItemsRight[rightIndex].drilledComment}');
                }
              }
            }
          }
          setState(() {
            _holeIncDecUpdate = false;
          });
        }
      });
    //   busyUpdating = false;
    // }
    // didChangeDependencies();
    print('SITEMVALUE: if (addTotalDrillTime: ${addTotalDrillTime} > 0 && addHoles: ${addHoles} == _prevHole: ${_prevHole} && _prevHole: ${_prevHole} != 0)');
    print('SITEMVALUE: } else if (addTotalDrillTime: ${addTotalDrillTime} == 0 && addHoles: ${addHoles} != _prevHole: ${_prevHole} && _prevHole: ${_prevHole} == 0)');
    if (addTotalDrillTime > 0 && addHoles == _prevHole && _prevHole != 0) {
      _prevHole = addHoles;
      _depthAchieved = 0;
      _startDateTime = '0';
      _endDateTime = '0';
      _totalDrillTime = 0;
      _currentTotalDrillTime = '00:00:00';
      _longitude = 0;
      _latitude = 0;
      _active = 'Yes';
      _submitted = 'No';
      _currentComment = '';
      _drillRods = '';
      _drillRodsQty = 0;
      _drillBits = '';
      _drillBitsQty = 0;
      _drillCouplings = '';
      _drillCouplingsQty = 0;
      _replaceDateTime = 0;
      // if (!addFirstHoles) {
      //   print('ADDFIRSTHOLES RESET END: addFirstHoles: ${addFirstHoles}, addHoles: ${addHoles}, _prevHole: ${_prevHole}, addTotalDrillTime: ${addTotalDrillTime}');
      //   if (addHoles > 0)
      //     _prevHole = addHoles;
      //   if (_prevDepth > 0)
      //     _depth = addDepth;
      //   if (_prevDepthAchieved > 0)
      //     _depthAchieved = addAchievedDepth;
      //   if (_prevStartDateTime != '0')
      //     _startDateTime = addStartDateTime;
      //   if (_prevEndDateTime != '0')
      //     _endDateTime = addEndDateTime;
      //   if (_prevTotalDrillTime > 0)
      //     _totalDrillTime = addTotalDrillTime;
      //   if (_prevCurrentTotalDrillTime != '00:00:00')
      //     _currentTotalDrillTime = addCurrentTotalDrillTime;
      //   if (_prevLongitude > 0)
      //     _longitude = addLongitude;
      //   if (_prevLatitude > 0)
      //     _latitude = addLatitude;
      //   if (_prevActive != 'Yes')
      //     _active = addActive;
      //   if (_prevSubmitted != 'No')
      //     _submitted = addSubmitted;
      //   if (_prevComment != '')
      //     _currentComment = addComment;
      //   if (_prevDrillRods != '')
      //     _drillRods = addDrillRods;
      //   if (_prevDrillRodsQty > 0)
      //     _drillRodsQty = addDrillRodsQty;
      //   if (_prevDrillBits != '')
      //     _drillBits = addDrillBits;
      //   if (_prevDrillBitsQty > 0)
      //     _drillBitsQty = addDrillBitsQty;
      //   if (_prevDrillCouplings != '')
      //     _drillCouplings = addDrillCouplings;
      //   if (_prevDrillCouplingsQty > 0)
      //     _drillCouplingsQty = addDrillCouplingsQty;
      //   if (_prevReplaceDateTime > 0)
      //     _replaceDateTime = addReplaceDateTime;
      // } else {
      //   print('ADDFIRSTHOLES RESET START: addFirstHoles: ${addFirstHoles}, addHoles: ${addHoles}, _prevHole: ${_prevHole}');
      //   _depthAchieved = 0;
      //   _startDateTime = '0';
      //   _endDateTime = '0';
      //   _totalDrillTime = 0;
      //   _currentTotalDrillTime = '00:00:00';
      //   _longitude = 0;
      //   _latitude = 0;
      //   _active = 'Yes';
      //   _submitted = 'No';
      //   _currentComment = '';
      //   _drillRods = '';
      //   _drillRodsQty = 0;
      //   _drillBits = '';
      //   _drillBitsQty = 0;
      //   _drillCouplings = '';
      //   _drillCouplingsQty = 0;
      //   _replaceDateTime = 0;
      // }
    } else if (addTotalDrillTime == 0 && addHoles != _prevHole && _prevHole == 0) {
      _prevHole = addHoles;
    }
  }

  @override
  void didChangeDependencies() async {
    if (drilledItemsLeftAdded.isEmpty &&
        drilledItemsRightAdded.isEmpty &&
        !_attemptedToGetDrillJobItems &&
        _drillId != null &&
        _drillId != '') {
      await _GetDrillJobDataItems().then((value) {
        _attemptedToGetDrillJobItems = true;
        if (holeItems.isEmpty || holeItems.length < 100) {
        print('ITEMVALUE SETSIDE: holeItems.length: ${holeItems.length}');
          addRowsAndHoles(false, false);
          // addRowsAndHoles(true, false);
        }
      });
    }
    String itemsId = '';

    if (_rowsSet && _holesSet && _holeIncDecUpdate) {
      itemsId = await storedHoleRowData();
      itemsId = await setHoleRowData(itemsId);
    }

    if (itemsId != null && _holeIncDecUpdate) {
      if (_rowsAndHolesAdded && _currentRow > 0 && _currentHole > 0) {
        await addRows(
                itemsId,
                _drillJobId,
                (_side == 0) ? 0 : 1,
                _currentRow,
                _currentHole,
                _depth,
                _depthAchieved,
                int.parse(_startDateTime),
                int.parse(_endDateTime),
                _totalDrillTime,
                _currentTotalDrillTime,
                _longitude.toString(),
                _latitude.toString(),
                _active,
                _submitted,
                _currentComment,
                _drillRods,
                _drillRodsQty,
                _drillBits,
                _drillBitsQty,
                _drillCouplings,
                _drillCouplingsQty,
                _replaceDateTime,
                false)
            .then((value) => {
                  setState(() {
                    _holeIncDecUpdate = false;
                    _totalDrillTime = 0;
                    _currentTotalDrillTime = '00:00:00';
                    _depthAchieved = 0;
                    _depth = 0;
                    _currentComment = '';
                    _drillRods = '';
                    _drillRodsQty = 0;
                    _drillBits = '';
                    _drillBitsQty = 0;
                    _drillCouplings = '';
                    _drillCouplingsQty = 0;
                    _replaceDateTime = 0;
                    _drillRodsController.text = _drillRods.toString();
                    _drillRodsQtyController.text = (_drillRodsQty > 0) ? _drillRodsQty.toString() : '';
                    _drillBitsController.text = _drillBits.toString();
                    _drillBitsQtyController.text = (_drillBitsQty > 0) ? _drillBitsQty.toString() : '';
                    _drillCouplingsController.text = _drillCouplings.toString();
                    _drillCouplingsQtyController.text = (_drillCouplingsQty > 0) ? _drillCouplingsQty.toString() : '';
                  }),
                });
      }
    }
    super.didChangeDependencies();
    
  }

  String setHoleRowData(String itemsId) {
    if (_decrement) {
      if (_holeDecrementSelected == null ||
          _holeDecrementSelected == 0
          || _holeDecrementSelected == 1
          ) {
        if (holeItemsReversed.isNotEmpty) {
          _holeDecrementSelected = int.parse(holeItemsReversed.first);
        }
      }
    } else {
      print(
          'SETHOLEROWDATA: setHoleRowData _holeIncrementSelected: ${_holeIncrementSelected}, holeItems.first ${holeItems.first}, _storeHoleIncrementSelected: ${_storeHoleIncrementSelected}');
      if (_holeIncrementSelected == null ||
          _holeIncrementSelected == 0
          || _holeIncrementSelected == 1
          ) {
        if (holeItems.isNotEmpty) {
          _holeIncrementSelected = int.parse(holeItems.first);
          print(
              'SETHOLEROWDATA: setHoleRowData _holeIncrementSelected: ${_holeIncrementSelected}, holeItems.first ${holeItems.first}');
        }
      }
    }

    if (_currentRow != null && _currentRow > 0) {
      if (_rowSelected == null || _rowSelected == 0) {
        if (rowItems.isNotEmpty) {
          _rowSelected = int.parse(rowItems.first);
        }
      }
    }

    if (_currentRow > 0 && _currentHole > 0) {
      if (_decrement) {
        if (_storeRowSelected != null &&
            _storeRowSelected > 0 &&
            _storeHoleDecrementSelected != null &&
            _storeHoleDecrementSelected > 0) {
          itemsId = (_storeRowSelected.toString() +
              _storeHoleDecrementSelected.toString());
          _currentRow = _storeRowSelected;
          _currentHole = _storeHoleDecrementSelected;
        }
      } else {
        if (_storeRowSelected != null &&
            _storeRowSelected > 0 &&
            _storeHoleIncrementSelected != null &&
            _storeHoleIncrementSelected > 0) {
          itemsId = (_storeRowSelected.toString() +
              _storeHoleIncrementSelected.toString());
          _currentRow = _storeRowSelected;
          _currentHole = _storeHoleIncrementSelected;
        }
      }
    }
    return itemsId;
  }

  String storedHoleRowData() {
    String itemsId = '';
    print('SETHOLEROWDATA CURRENTHOLE storedHoleRowData: _side ${_side}');
    print(
        'SETHOLEROWDATA CURRENTHOLE storedHoleRowData: _currentRow: ${_currentRow} > 0 && _currentHole: ${_currentHole} > 0');
    print(
        'SETHOLEROWDATA: storedHoleRowData _holeIncrementSelected: ${_holeIncrementSelected}, holeItems.first ${holeItems.first}');
    if (_currentRow > 0 && _currentHole > 0) {
      print(
          'CURRENTHOLE storedHoleRowData: _holeIncDecUpdate ${_holeIncDecUpdate}');
      if (_holeIncDecUpdate) {
        if (_decrement) {
          if (_storeRowSelected != null &&
              _storeRowSelected != 0 &&
              _storeHoleDecrementSelected != null &&
              _storeHoleDecrementSelected != 0) {
            itemsId = (_storeRowSelected.toString() +
                _storeHoleDecrementSelected.toString());
            _currentRow = _storeRowSelected;
            _currentHole = _storeHoleDecrementSelected;
          } else if (_rowSelected != null &&
              _rowSelected > 0 &&
              _holeDecrementSelected != null &&
              _holeDecrementSelected > 0) {
            itemsId =
                (_rowSelected.toString() + _holeDecrementSelected.toString());
            _currentRow = _rowSelected;
            _currentHole = _holeDecrementSelected;
          }
        } else {
          print(
              'A SETHOLEROWDATA: INCREMENT _storeRowSelected: ${_storeRowSelected}, _storeHoleIncrementSelected: ${_storeHoleIncrementSelected}');
          print(
              'B SETHOLEROWDATA: INCREMENT _rowSelected: ${_rowSelected}, _holeIncrementSelected: ${_holeIncrementSelected}, holeItems.first: ${holeItems.first}');
          if (_storeRowSelected != null &&
              _storeRowSelected != 0 &&
              _storeHoleIncrementSelected != null &&
              _storeHoleIncrementSelected != 0) {
            itemsId = (_storeRowSelected.toString() +
                _storeHoleIncrementSelected.toString());
            print('SET CURRENT HOLE A');
            _currentRow = _storeRowSelected;
            _currentHole = _storeHoleIncrementSelected;
          } else if (_rowSelected != null &&
              _rowSelected > 0 &&
              _holeIncrementSelected != null &&
              _holeIncrementSelected > 0) {
            print(
                'C SETHOLEROWDATA: INCREMENT _rowSelected: ${_rowSelected}, _holeIncrementSelected: ${_holeIncrementSelected}, holeItems.first: ${holeItems.first}');
            itemsId =
                (_rowSelected.toString() + _holeIncrementSelected.toString());
            print('SET CURRENT HOLE B');

            _storeRowSelected = _rowSelected;
            _currentRow = _storeRowSelected;
            _storeHoleIncrementSelected = _holeIncrementSelected;
            _currentHole = _storeHoleIncrementSelected;
            print(
                'D SETHOLEROWDATA: INCREMENT _rowSelected: ${_rowSelected}, _holeIncrementSelected: ${_holeIncrementSelected}, holeItems.first: ${holeItems.first}');
          }
        }
      } else {
        itemsId = (_currentRow.toString() + _currentHole.toString());
      }
    }
    return itemsId;
  }

  @override
  void initState() {
    holeCounterBox.addListener(() {
      if (holeCounterUpdate == 'pending') {
        print(
            "holeCounterBox Has LOST focus: ${holeCounterBox.hasFocus}, HOLE: ${_holeCounter}");
        holeCounterUpdate = 'no';
        if (_holeCounter != null) {
          setState(() {});
        } else {
          setState(() {});
        }
      }
    });

    sideBox.addListener(() {
      if (sideBox.hasFocus) {
        print("sideBox Has focus: ${sideBox.hasFocus}");
        sideUpdate = 'pending';
      }
      if (sideUpdate == 'pending' && !sideBox.hasFocus) {
        print("sideBox Has LOST focus: ${sideBox.hasFocus}");
        sideUpdate = 'no';
        if (_side != null) {
          setState(() {});
        } else {
          setState(() {});
        }
      }
    });

    rowBox.addListener(() {
      print(
          'HOLEBOX START ROW _singleRowSet:${_singleRowSet} && _currentRow:${_currentRow} != null && _currentRow:${_currentRow} != 0 && _rowsSet:${_rowsSet} && rowItems.isNotEmpty:${rowItems.isNotEmpty}');
      if (rowBox.hasFocus) {
        rowUpdate = 'pending';
      }
      if (rowUpdate == 'pending' && !rowBox.hasFocus) {
        rowUpdate = 'no';
        if (_row != null) {
          setState(() {
            _singleRowSet = true;
            if (_singleHoleSet && !_holesSet && _singleRowSet && !_rowsSet) {
              if (_row > 0 && _hole > 0 && !_rowsAndHolesAdded) {
                _rowsAndHolesAdded = true;
                _defRowController.text = _row.toString();
                addRowsAndHoles(false, false);
              }
            }
          });
        } else {
          setState(() {
            _singleRowSet = false;
          });
        }
      }
      print(
          'HOLEBOX END ROW _singleRowSet:${_singleRowSet} && _currentRow:${_currentRow} != null && _currentRow:${_currentRow} != 0 && _rowsSet:${_rowsSet} && rowItems.isNotEmpty:${rowItems.isNotEmpty}');
    });

    holeBox.addListener(() {
      if (holeBox.hasFocus) {
        holeUpdate = 'pending';
      }
      if (holeUpdate == 'pending' && !holeBox.hasFocus) {
        holeUpdate = 'no';
        if (_hole != null && _hole > 0) {
          setState(() {
            _singleHoleSet = true;
            if (_singleHoleSet && _singleRowSet && !_rowsSet && !_holesSet) {
              if (_singleHoleSet &&
                  _hole != null &&
                  _hole > 0 &&
                  _singleRowSet &&
                  _row != null &&
                  _row > 0 &&
                  !_rowsAndHolesAdded) {
                _rowsAndHolesAdded = true;

                addRowsAndHoles(false, false);
              }
            } else {
              setState(() {
                _singleHoleSet = false;
              });
            }
          });
        } else {
          setState(() {
            _singleHoleSet = false;
          });
        }
        print("holeBox holeLeftSet: ${_singleHoleSet}");
      }
      print(
          'HOLEBOX END: _singleHoleSet:${_singleHoleSet} && _currentHole:${_currentHole} != null && _currentHole:${_currentHole} != 0 && _holesSet:${_holesSet} && holeItems.isNotEmpty:${holeItems.isNotEmpty} && holeItemsReversed.isNotEmpty:${holeItemsReversed.isNotEmpty}');
    });

    depthBox.addListener(() {
      if (depthBox.hasFocus) {
        print("depthBox Has focus: ${depthBox.hasFocus}");
        depthUpdate = 'pending';
      }
      if (depthUpdate == 'pending' && !depthBox.hasFocus) {
        print("depthBox Has LOST focus: ${depthBox.hasFocus}");
        depthUpdate = 'no';
        if (_depth != null && _depth > 0) {
          setState(() {
            // _depthSet = true;
            _defDepthController.text = _depth.toString();
            // (_employeeSet && _drillIdSet) ? _GetDrillJobData() : null;
          });
        } else {
          setState(() {
            // _depthSet = false;
          });
        }
      }
    });

    achievedDepthBox.addListener(() {
      if (achievedDepthBox.hasFocus) {
        print("achievedDepthBox Has focus: ${achievedDepthBox.hasFocus}");
        achievedDepthUpdate = 'pending';
      }
      if (achievedDepthUpdate == 'pending' && !achievedDepthBox.hasFocus) {
        print("achievedDepthBox Has LOST focus: ${achievedDepthBox.hasFocus}");
        achievedDepthUpdate = 'no';
        if (_depthAchieved != null && _depthAchieved > 0) {
          setState(() {
            // _depthAchieved = _achievedDepthLeft.toString();
          });
        } else {
          setState(() {
            // _depthAchievedSet = false;
          });
        }
      }
    });

    locationBox.addListener(() {
      if (locationBox.hasFocus) {
        print("locationBox Has focus: ${locationBox.hasFocus}");
        locationUpdate = 'pending';
      }
      if (locationUpdate == 'pending' && !locationBox.hasFocus) {
        print("locationBox Has LOST focus: ${locationBox.hasFocus}");
        locationUpdate = 'no';
        if (_side != null) {
          setState(() {
            _currentLatitude = _latitude;
            _currentLongitude = _longitude;
          });
        }
        //  else {
        //   setState(() {});
        // }
        print(
            "locationBox latitude: ${_currentLatitude} : longitude: ${_currentLongitude}");
      }
    });
    super.initState();
  }

  void addRowsAndHoles(bool firstAdd, bool additionalHoles) async {
    var startIndex = 1;
    var endIndex = _hole;
    if (additionalHoles) {
      startIndex = int.parse(holeItems.last) + 1;
      endIndex = int.parse(holeItems.last) + 10;
    }

    // for (var i = 1; i <= _row; i++) {
    int setRow = _row;
    for (var j = startIndex; j <= endIndex; j++) {
      int setHole = j;
      print(
          'ITEMVALUE SETSIDE: _row: ${_row}, _hole: ${_hole}, ${_side}: (_side == 0) ? Left : Right');
      print('ITEMVALUE SETSIDE: setRow: ${setRow}, setHole: ${setHole}, startIndex: ${startIndex}, endIndex: ${endIndex}, firstAdd: ${firstAdd}');
      String itemsId = (setRow.toString() + setHole.toString());

      // if (!holeItems.contains(setHole.toString()) && !holeItems.contains(nextHole.toString())) {
      //   print('B SITEMVALUE SETSIDE: !holeItems.contains(setHole.toString()): ${!holeItems.contains(setHole.toString())}');
      //   holeItems.add(setHole.toString());
      //   if (_currentHole == 0) {
      //     _currentHole = int.parse(holeItems.first);
      //   }
      //   if (_currentRow == 0) {
      //     _currentRow = setRow;
      //   }
      // }
      // if (!holeItemsReversed.contains(setHole.toString())) {
      //   holeItemsReversed.insert(0, setHole.toString());
      //   if (_currentHole == 0) {
      //     _currentHole = int.parse(holeItemsReversed.first);
      //   }
      //   if (_currentRow == 0) {
      //     _currentRow = setRow;
      //   }
      // }
      if (firstAdd) {
        if (setHole == 1) {
          await addRows(
              itemsId,
              _drillJobId,
              _side, //_side,
              setRow,
              setHole,
              _depth,
              _depthAchieved,
              int.parse(_startDateTime),
              int.parse(_endDateTime),
              _totalDrillTime,
              _currentTotalDrillTime,
              _longitude.toString(),
              _latitude.toString(),
              _active,
              _submitted,
              _currentComment,
              _drillRods,
              _drillRodsQty,
              _drillBits,
              _drillBitsQty,
              _drillCouplings,
              _drillCouplingsQty,
              _replaceDateTime,
              firstAdd)
            .then((value) {
              print(
                'SETSIDE: A addRows(null, _drillJobId: ${_drillJobId}, _side: 0, setRow: ${setRow}, setHole: ${setHole}, _depth: ${_depth}, _startDateTime: ${int.parse(_startDateTime)}, _endDateTime: ${int.parse(_endDateTime)}, _totalDrillTime: ${_totalDrillTime}, _longitude: ${_longitude.toString()}, _latitude: ${_latitude.toString()}, _active: ${_active}, _submitted: ${_submitted}, _currentComment: ${_currentComment}');
            }).then((value) {
              if (j == _hole) {
                _holesSet = true;
                _rowsSet = true;
                // firstAdd = false;
                // _holeIncDecUpdate = true;
              }
            });
        }
      } else {
      await addRows(
              itemsId,
              _drillJobId,
              _side, //_side,
              setRow,
              setHole,
              _depth,
              _depthAchieved,
              int.parse(_startDateTime),
              int.parse(_endDateTime),
              _totalDrillTime,
              _currentTotalDrillTime,
              _longitude.toString(),
              _latitude.toString(),
              _active,
              _submitted,
              _currentComment,
              _drillRods,
              _drillRodsQty,
              _drillBits,
              _drillBitsQty,
              _drillCouplings,
              _drillCouplingsQty,
              _replaceDateTime,
              firstAdd)
          .then((value) {
        print(
            'SETSIDE: A addRows(null, _drillJobId: ${_drillJobId}, _side: 0, setRow: ${setRow}, setHole: ${setHole}, _depth: ${_depth}, _startDateTime: ${int.parse(_startDateTime)}, _endDateTime: ${int.parse(_endDateTime)}, _totalDrillTime: ${_totalDrillTime}, _longitude: ${_longitude.toString()}, _latitude: ${_latitude.toString()}, _active: ${_active}, _submitted: ${_submitted}, _currentComment: ${_currentComment}');
      }).then((value) {
        if (j == _hole) {
          _holesSet = true;
          _rowsSet = true;
          // firstAdd = false;
             // _holeIncDecUpdate = true;
        }
      });
      }
    }
    print('ITEMVALUE SETSIDE: holeItems.length: ${holeItems.length}');
    print('ITEMVALUE SETSIDE: holeItems.length: _currentHole: ${_currentHole} != null');
    print('ITEMVALUE SETSIDE: holeItems.length: _currentHole: ${_currentHole} != 0');
    print('ITEMVALUE SETSIDE: holeItems.length: _holesSet: ${_holesSet}');
    print('ITEMVALUE SETSIDE: holeItems.length: holeItems.isNotEmpty: ${holeItems.isNotEmpty}');
    print('ITEMVALUE SETSIDE: holeItems.length: holeItemsReversed.isNotEmpty: ${holeItemsReversed.isNotEmpty}');
    // }
  }

  @override
  void dispose() {
    // _timer.cancel();
    holeCounterBox.dispose();
    sideBox.dispose();
    rowBox.dispose();
    holeBox.dispose();
    locationBox.dispose();
    depthBox.dispose();
    timerBox.dispose();
    super.dispose();
  }

  // Initialize an instance of Stopwatch
  final Stopwatch _stopwatch = Stopwatch();
  // Timer
  late Timer _timer;

  // The result which will be displayed on the screen
  String _resultTimer = '00:00:00';

  // This function will be called when the user presses the Start button
  void _startTimer() {
    // Timer.periodic() will call the callback function every 100 milliseconds
    _timer = Timer.periodic(const Duration(milliseconds: 30), (Timer t) {
      // Update the UI
      setState(() {
        // result in hh:mm:ss format
        _resultTimer =
            '${_stopwatch.elapsed.inMinutes.toString().padLeft(2, '0')}:${(_stopwatch.elapsed.inSeconds % 60).toString().padLeft(2, '0')}:${(_stopwatch.elapsed.inMilliseconds % 100).toString().padLeft(2, '0')}';
        print('TIMER RUNNING ${_resultTimer}');
      });
    });
    // Start the stopwatch
    _stopwatch.start();
  }

  // This function will be called when the user presses the Stop button
  void _stopTimer() {
    // _currentTotalDrillTime =
    //     '${_stopwatch.elapsed.inMinutes.toString().padLeft(2, '0')}:${(_stopwatch.elapsed.inSeconds % 60).toString().padLeft(2, '0')}:${(_stopwatch.elapsed.inMilliseconds % 100).toString().padLeft(2, '0')}';
    _timer.cancel();
    _stopwatch.stop();
    _totalDrillTime = _stopwatch.elapsed.inMilliseconds;
    _currentTotalDrillTime =
        '${_stopwatch.elapsed.inMinutes.toString().padLeft(2, '0')}:${(_stopwatch.elapsed.inSeconds % 60).toString().padLeft(2, '0')}:${(_stopwatch.elapsed.inMilliseconds % 100).toString().padLeft(2, '0')}';
    didChangeDependencies();
  }

  // This function will be called when the user presses the Reset button
  void _resetTimer() {
    _stopTimer();
    // _totalDrillTime = _stopwatch.elapsed.inSeconds;
    _stopwatch.reset();

    // Update the UI
    setState(() {});
  }

  Future _GetDrillJobDataItems() async {
    if (_drillId == null || _drillId == '') {
      return;
    }
    final itemsTimingList = Provider.of<DrillJobs>(context, listen: false);
    await Provider.of<DrillJobs>(context, listen: false)
        .getDrillJobsItems(_drillJobId);

    itemsTimingList.itemsTiming.forEach((value) {
      print(
          'ITEMVALUE value: ${value.achievedDepth}, ${value.comment}, ${value.rowCount}, ${value.holes}, ${value.side}\n');
      String row = value.rowCount.toString();
      String hole = value.holes.toString();
      String rowHole = value.side.toString() +
          value.rowCount.toString() +
          value.holes.toString();
      String fetchedDrillTime =
          "${(value.totalDrillTime ~/ 60000).toString().padLeft(2, '0')}:${(value.totalDrillTime ~/ 1000 % 60).toString().padLeft(2, '0')}:${(value.totalDrillTime % 100).toString().padLeft(2, '0')}";
      int drilledItemsListIndex =
          drilledItemsList.indexWhere((e) => e.key == rowHole);
      if (value.holes == 1) {
        print('drilledItemsList: value.totaDrillTime: ${value.totalDrillTime} > 0 && value.rowCount: ${value.rowCount} > 0 && value.holes: ${value.holes} > 0 && drilledItemsListIndex: ${drilledItemsListIndex} < 0');
      }
      if (value.totalDrillTime > 0 &&
          value.rowCount > 0 &&
          value.holes > 0 &&
          drilledItemsListIndex < 0) {
        drilledItemsList.add(ReportItems(
            key: rowHole,
            drilledRow: value.rowCount.toString(),
            drilledHole: value.holes.toString(),
            drilledStartTime: value.startDateTime.toString(),
            drilledEndTime: value.endDateTime.toString(),
            drilledTime: fetchedDrillTime.toString(),
            drilledDepth: value.achievedDepth.toString(),
            drilledLongitude: value.longitude.toString(),
            drilledLatitude: value.latitude.toString(),
            drilledComment: value.comment.toString(),
            dateTime: DateTime.now(),
            drillRods: value.drillRods.toString(),
            drillRodsQty: value.drillRodsQty,
            drillBits: value.drillBits.toString(),
            drillBitsQty: value.drillBitsQty,
            drillCouplings: value.drillCouplings.toString(),
            drillCouplingsQty: value.drillCouplingsQty,
            replaceDateTime: value.replaceDateTime ));
            // replaceDateTime: int.parse(int.parse(DateTime.now().millisecondsSinceEpoch).toString())/1000 ));
      }
      if (value.holes == 1) {
        print('drilledItemsList: drilledItemsList.length: ${drilledItemsList.length}');
      }
      // print(
      //     'TK holeItems GETITEMS: BB value.side: ${value.side}, value.drillJobId: ${value.drillJobId}, _drillJobId: ${_drillJobId}');
      if (value.side == 0) {
        if (value.drillJobId == _drillJobId) {
          // print(
          //     'TK holeItems GETITEMS: BC LEFT (value.rowCount: ${value.rowCount} > 0 && value.holes: ${value.holes} > 0 && value.totalDrillTime: ${value.totalDrillTime} > 0 && drilledItemsLeftAdded.isEmpty: ${drilledItemsLeftAdded.isEmpty})');
          if (value.rowCount > 0 && value.holes > 0) {
            // if (_currentRow == 0 &&
            //     !_rowsSet &&
            //     _currentHole == 0 &&
            //     !_holesSet) {
            //   _currentRow = 1;
            //   _rowsSet = true;
            //   _currentHole = 1;
            //   _holesSet = true;
            // }
            if (!holeItems.contains(value.holes.toString())) {
              if (value.totalDrillTime <= 0) {
                setState(() {
                  print('C SITEMVALUE SETSIDE ADD: value.holes.toString(): ${value.holes.toString()}, !holeItems.contains(value.holes.toString()): ${!holeItems.contains(value.holes.toString())}');
                  holeItems.add(value.holes.toString());
                });
              }
            } else {
              if (value.totalDrillTime > 0) {
                setState(() {
                  print('C SITEMVALUE SETSIDE REMOVE: value.holes.toString(): ${value.holes.toString()}, !holeItems.contains(value.holes.toString()): ${!holeItems.contains(value.holes.toString())}');
                  holeItems.remove(value.holes.toString());
                });
              }
            }
            if (!holeItemsReversed.contains(value.holes.toString())) {
              if (value.totalDrillTime <= 0) {
                setState(() {
                  holeItemsReversed.insert(0, value.holes.toString());
                });
              }
            } else {
              if (value.totalDrillTime > 0) {
                setState(() {
                  holeItemsReversed.remove(value.holes.toString());
                  });
              }
            }
            if (!rowItems.contains(value.rowCount.toString())) {
              setState(() {
                rowItems.add(value.rowCount.toString());
              });
            }

            print('1 CHECKTHIS rowHole: ${rowHole}\n');
            print('1 CHECKTHIS rowCount: ${value.rowCount}\n');
            print('1 CHECKTHIS holes: ${value.holes}\n');
            print('1 CHECKTHIS drilledTime: ${fetchedDrillTime.toString()}\n');
            print(
                '1 CHECKTHIS drilledDepth: ${value.achievedDepth.toString()}\n');
            print(
                '1 CHECKTHIS drilledLongitude: ${value.longitude.toString()}\n');
            print(
                '1 CHECKTHIS drilledLatitude: ${value.latitude.toString()}\n');
            print('1 CHECKTHIS drilledComment: ${value.comment.toString()}\n');
            print('1 CHECKTHIS dateTime: ${DateTime.now()}\n');
            print('1 CHECKTHIS drillRods: ${value.drillRods.toString()}\n');
            print('1 CHECKTHIS drillRodsQty: ${value.drillRodsQty}\n');
            print('1 CHECKTHIS drillBits: ${value.drillBits.toString()}\n');
            print('1 CHECKTHIS drillBitsQty: ${value.drillBitsQty}\n');
            print(
                '1 CHECKTHIS drillCouplings: ${value.drillCouplings.toString()}\n');
            print(
                '1 CHECKTHIS drillCouplingsQty: ${value.drillCouplingsQty}\n');
            print(
                '1 CHECKTHIS replaceDateTime: ${value.replaceDateTime}\n');

            if (value.totalDrillTime > 0) {
              if (!drilledItemsLeftAdded.contains(rowHole)) {
                drilledItemsLeft.add(ReportItems(
                    key: rowHole,
                    drilledRow: value.rowCount.toString(),
                    drilledHole: value.holes.toString(),
                    drilledStartTime: value.startDateTime.toString(),
                    drilledEndTime: value.endDateTime.toString(),
                    drilledTime: fetchedDrillTime.toString(),
                    drilledDepth: value.achievedDepth.toString(),
                    drilledLongitude: value.longitude.toString(),
                    drilledLatitude: value.latitude.toString(),
                    drilledComment: value.comment.toString(),
                    dateTime: DateTime.now(),
                    drillRods: value.drillRods.toString(),
                    drillRodsQty: value.drillRodsQty,
                    drillBits: value.drillBits.toString(),
                    drillBitsQty: value.drillBitsQty,
                    drillCouplings: value.drillCouplings.toString(),
                    drillCouplingsQty: value.drillCouplingsQty,
                    replaceDateTime: value.replaceDateTime));
                drilledItemsLeftAdded.add(rowHole);
                setState(() {
                  fetchedDrillTime = '';
                });
              }
              setState(() {
                _rowsAndHolesAdded = true;
                if (_currentRow == 0 &&
                    !_rowsSet &&
                    _currentHole == 0 &&
                    !_holesSet) {
                  _currentRow = value.rowCount;
                  _rowsSet = true;
                  _currentHole = value.holes;
                  _holesSet = true;
                  // _holeIncDecUpdate = true;
                  if (_decrement) {
                    _holeDecrementSelected = _currentHole;
                  } else {
                    _holeIncrementSelected = _currentHole;
                  }
                  _rowSelected = _currentRow;
                }
              });
              setState(() {
                if (holeItems.contains(value.holes.toString())) {
                  holeItems.remove(value.holes.toString());
                }
                if (holeItemsReversed.contains(value.holes.toString())) {
                  holeItemsReversed.remove(value.holes.toString());
                }
              });
            } else {
              if (_currentRow == 0 &&
                  !_rowsSet &&
                  _currentHole == 0 &&
                  !_holesSet) {
                _currentRow = value.rowCount;
                _rowsSet = true;
                _currentHole = value.holes;
                _holesSet = true;
                if (_decrement) {
                  _holeDecrementSelected = _currentHole;
                } else {
                  _holeIncrementSelected = _currentHole;
                }
                _rowSelected = _currentRow;
              }
            }
            // _rowsAndHolesAdded = true;
          }
        }
      } else if (value.side == 1) {
        if (value.drillJobId == _drillJobId) {
          // print(
          //     'GETITEMS: BC Right (value.rowCount: ${value.rowCount} > 0 && value.holes: ${value.holes} > 0 && value.totalDrillTime: ${value.totalDrillTime} > 0 && drilledItemsRightAdded.isEmpty: ${drilledItemsRightAdded.isEmpty})');
          if (value.rowCount > 0 && value.holes > 0) {
            // if (_currentRow == 0 &&
            //     !_rowsSet &&
            //     _currentHole == 0 &&
            //     !_holesSet) {
            //   _currentRow = 1;
            //   _rowsSet = true;
            //   _currentHole = 1;
            //   _holesSet = true;
            //   // _side = 1;
            //   // _rightSide = true;
            // }

            if (!holeItems.contains(value.holes.toString())) {
              if (value.totalDrillTime <= 0) {
                setState(() {
                  print('C SITEMVALUE SETSIDE ADD: value.holes.toString(): ${value.holes.toString()}, !holeItems.contains(value.holes.toString()): ${!holeItems.contains(value.holes.toString())}');
                  holeItems.add(value.holes.toString());
                });
              }
            } else {
              if (value.totalDrillTime > 0) {
                setState(() {
                  print('C SITEMVALUE SETSIDE REMOVE: value.holes.toString(): ${value.holes.toString()}, !holeItems.contains(value.holes.toString()): ${!holeItems.contains(value.holes.toString())}');
                  holeItems.remove(value.holes.toString());
                });
              }
            }
            if (!holeItemsReversed.contains(value.holes.toString())) {
              if (value.totalDrillTime <= 0) {
                setState(() {
                  holeItemsReversed.insert(0, value.holes.toString());
                });
              }
            } else {
              if (value.totalDrillTime > 0) {
                setState(() {
                  holeItemsReversed.remove(value.holes.toString());
                });
              }
            }
            if (!rowItems.contains(value.rowCount.toString())) {
              setState(() {
                rowItems.add(value.rowCount.toString());
              });
            }

            if (value.totalDrillTime > 0) {
              if (!drilledItemsRightAdded.contains(rowHole)) {
                drilledItemsRight.add(ReportItems(
                    key: rowHole,
                    drilledRow: value.rowCount.toString(),
                    drilledHole: value.holes.toString(),
                    drilledStartTime: value.startDateTime.toString(),
                    drilledEndTime: value.endDateTime.toString(),
                    drilledTime: fetchedDrillTime.toString(),
                    drilledDepth: value.achievedDepth.toString(),
                    drilledLongitude: value.longitude.toString(),
                    drilledLatitude: value.latitude.toString(),
                    drilledComment: value.comment.toString(),
                    dateTime: DateTime.now(),
                    drillRods: value.drillRods.toString(),
                    drillRodsQty: value.drillRodsQty,
                    drillBits: value.drillBits.toString(),
                    drillBitsQty: value.drillBitsQty,
                    drillCouplings: value.drillCouplings.toString(),
                    drillCouplingsQty: value.drillCouplingsQty,
                    replaceDateTime: value.replaceDateTime));
                drilledItemsRightAdded.add(rowHole);
                setState(() {
                  fetchedDrillTime = '';
                });
              }
              //  else {
              //   drilledItemsRight. ReportItems(       // Replace items in list
              //     key: rowHole,
              //     drilledRow: value.rowCount.toString(),
              //     drilledHole: value.holes.toString(),
              //     drilledTime: value.totalDrillTime.toString(),
              //     drilledDepth: value.achievedDepth.toString(),
              //     drilledLongitude: value.longitude.toString(),
              //     drilledLatitude: value.latitude.toString(),
              //     drilledComment: value.comment.toString(),
              //     dateTime: DateTime.now(),
              //   ));
              // }
              setState(() {
                if (holeItems.contains(value.holes.toString())) {
                  holeItems.remove(value.holes.toString());
                }
                if (holeItemsReversed.contains(value.holes.toString())) {
                  holeItemsReversed.remove(value.holes.toString());
                }
              });
            } else {
              if (_currentRow == 0 &&
                  !_rowsSet &&
                  _currentHole == 0 &&
                  !_holesSet) {
                _currentRow = value.rowCount;
                _rowsSet = true;
                _currentHole = value.holes;
                _holesSet = true;
                if (_decrement) {
                  _holeDecrementSelected = _currentHole;
                } else {
                  _holeIncrementSelected = _currentHole;
                }
                _rowSelected = _currentRow;
              }
            }
            // _rowsAndHolesAddedRight = true;
          }
        }
      }
    });
    // as void Function(DrillItemsTiming element));

    print(
        'GETITEMS: _drillJobId: ${_drillJobId}, _currentRow: ${_currentRow}, _currentHole: ${_currentHole}');
    if (_drillJobId > 0) {
      // && _currentRow > 0 && _currentHole > 0) {
      // print('GETITEMS RUNNING');

      // print('GETITEMS b Current DRILLJOBID: ${_drillJobId}');
      Provider.of<DrillJobs>(context, listen: false)
          .getDrillJobsItems(_drillJobId)
          .then((value) async {
        print('GETITEMS c Current DRILLJOBID: ${_drillJobId}');
        final loadedJobItems = await Provider.of<DrillJobs>(
          context,
          listen: false,
        ).findByIdItemsHole(_drillJobId, 1, 1);
        // ).findByIdItemsHole(_drillJobId, 1, 1);
        print(
            'GETITEMS ADDDRILLJOBITEMS QUERY REQ:  _drillJobId: ${_drillJobId}, _side: ${_side}, _currentRow: ${_currentRow} : ');
        print(
            'GETITEMS ADDDRILLJOBITEMS QUERY RET: loadedJobItems: ${loadedJobItems.drillJobItemsId}');

        if (loadedJobItems != null) {
          if (loadedJobItems.drillJobItemsId != null) {
            _currentDrillJobItemsId = loadedJobItems.drillJobItemsId;
          }
          if (loadedJobItems.rowCount > 0) {
            _row = loadedJobItems.rowCount;
            _currentRow = _row;
            _defRowController.text = _row.toString();
          }
          print(
              '1 CURRENTHOLE: loadedJobItems.holes: ${loadedJobItems.holes}, _hole: ${_hole}, _currentHole: ${_currentHole}, loadedJobItems.totalDrillTime: ${loadedJobItems.totalDrillTime}\n');
          if (loadedJobItems.holes > 0) {
            print(
                '2 CURRENTHOLE: loadedJobItems.holes: ${loadedJobItems.holes}, _hole: ${_hole}, _currentHole: ${_currentHole}, loadedJobItems.totalDrillTime: ${loadedJobItems.totalDrillTime}\n');
            _hole = loadedJobItems.holes;
            _currentHole = _hole;
          }
          print(
              '3 CURRENTHOLE: loadedJobItems.holes: ${loadedJobItems.holes}, _hole: ${_hole}, _currentHole: ${_currentHole}, loadedJobItems.totalDrillTime: ${loadedJobItems.totalDrillTime}\n');
          if (_currentLongitude <= 0) {
            if (loadedJobItems.longitude != '0.0' &&
                loadedJobItems.longitude != null &&
                loadedJobItems.longitude != '') {
              print(
                  'COORDINATES: A ${_currentLongitude}, loadedJobItems.longitude: ${loadedJobItems.longitude}, double.parse(loadedJobItems.latitude): ${double.parse(loadedJobItems.latitude)}');
              _longitude = double.parse(loadedJobItems.longitude);
              _currentLongitude = _longitude;
            }
          }

          if (_currentLatitude <= 0) {
            if (loadedJobItems.latitude != '0.0' &&
                loadedJobItems.latitude != null &&
                loadedJobItems.latitude != '') {
              print(
                  'COORDINATES: B ${_currentLatitude}, loadedJobItems.latitude: ${loadedJobItems.latitude}, double.parse(loadedJobItems.latitude): ${double.parse(loadedJobItems.latitude)}');
              _latitude = double.parse(loadedJobItems.latitude);
              _currentLatitude = _latitude;
              print(
                  'GETITEMS ADDDRILLJOBITEMS QUERY RET: loadedJobItems.latitude: ${loadedJobItems.latitude}');
            }
          }

          if (loadedJobItems.depth > 0) {
            _depth = loadedJobItems.depth;
            _defDepthController.text = _depth.toString();
            print(
                'GETITEMS ADDDRILLJOBITEMS QUERY RET: loadedJobItems.depth: ${loadedJobItems.depth}');
          }

          print('GETITEMS ADDDRILLJOBITEMS QUERY RET: DONE');
          setState(() {
            _rowsAndHolesAdded = true;
            // _holeIncDecUpdate = true;
            print('_holeIncDecUpdate: _holeIncDecUpdate = true');
          });
        }
      });
    }
    print('GETITEMS DONE');
    // });
    setState(() {
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final deviceSize = MediaQuery.of(context).size;
    // final devicePixel = MediaQuery.of(context).devicePixelRatio;

    DrillItems currentDrillJob =
        ModalRoute.of(context)!.settings.arguments as DrillItems;
    _drillJobId = currentDrillJob.drillJobId;
    _drillId = currentDrillJob.drillId;
    _employee = currentDrillJob.employee;
    _siteType = currentDrillJob.siteType;
    _siteTypeOther = currentDrillJob.siteTypeOther;
    _drillSize = currentDrillJob.drillSize;
    _spacing = currentDrillJob.spacing;
    _burden = currentDrillJob.burden;
    _bench = currentDrillJob.bench;
    // _active = currentDrillJob.active;
    // _startDateTime = currentDrillJob.startDateTime;
    // _endDateTime = currentDrillJob.endDateTime;
    _submittedDateTime = currentDrillJob.submittedDateTime;
    // _totalDrillTime = currentDrillJob.totalDrillTime;
    // _submitted = currentDrillJob.submitted;
    _completedChecklist = currentDrillJob.completedChecklist;
    _firstChecklist = currentDrillJob.firstChecklist;
    _secondChecklist = currentDrillJob.secondChecklist;
    _thirdChecklist = currentDrillJob.thirdChecklist;
    _fourthChecklist = currentDrillJob.fourthChecklist;
    _fifthChecklist = currentDrillJob.fifthChecklist;
    _machineHours = currentDrillJob.machineHours;
    _skipCheckList = currentDrillJob.skipCheckList;
    _skipCheckListReason = currentDrillJob.skipCheckListReason;

    // int _rowCount = currentDrillJob.rowCount;
    // int _holeCount = currentDrillJob.holeCount;
    // _row = _rowCount;
    // _hole = _holeCount;

    didChangeDependencies();

    // _isLoading ? CircularProgressIndicator() :
    return _isLoading ? CircularProgressIndicator() : Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        title: Text('Drill JobId: ${_drillJobId}'),
        centerTitle: true,
        actions: [
          SizedBox(
            height: kToolbarHeight,
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: 9),
              // padding: const EdgeInsets.only(right: 0),
              child: Image.asset('assets/images/TrenchAndBulk.png'),
            ),
          ),
        ],
      ),
      drawer: AppDrawer(),
      body: Column(
        children: [
          Container(
            child: SingleChildScrollView(
              child: Container(
                width: deviceSize.width, // * 0.98,
                child: Column(
                  children: [
                    Container(
                      height: 35.0,
                      decoration: BoxDecoration(
                        color: Theme.of(context).canvasColor,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.2),
                            spreadRadius: 5,
                            blurRadius: 7,
                            offset: Offset(0, 3), // changes position of shadow
                          ),
                        ],
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        mainAxisSize: MainAxisSize.max,
                        children: [
                          Padding(
                            padding: EdgeInsets.all(
                                2.0), //apply padding to all four sides
                            child: Text(
                              'Hole Counter',
                              style: TextStyle(fontSize: 20),
                            ),
                          ),
                          SizedBox(
                            width: deviceSize.width * 0.01,
                            // height: 0.1, // 80,
                          ),
                          ToggleSwitch(
                            minWidth: 75.0,
                            minHeight: 50.0,
                            fontSize: 12.0,
                            initialLabelIndex: _holeCounter,
                            cornerRadius: 3.0,
                            totalSwitches: 2,
                            labels: [
                              'Increment',
                              'Decrement',
                              // 'Off',
                            ],
                            onToggle: (index) {
                              holeCounterUpdate = 'pending';
                              if (index == 0) {
                                setState(() {
                                  _decrement = false;
                                  _holeCounter = index!;
                                  // didChangeDependencies();
                                });
                              } else if (index == 1) {
                                setState(() {
                                  _decrement = true;
                                  _holeCounter = index!;
                                  // didChangeDependencies();
                                });
                              }
                              //  else if (index == 2) {
                              //   setState(() {
                              //     _decrement = false;
                              //     _holeCounter = index!;
                              //     // didChangeDependencies();
                              //   });
                              // }
                              holeCounterUpdate = 'no';
                              print('HOLECOUNTERLEFT: ${_holeCounter}');
                              print('HOLECOUNTERUPDATE: ${holeCounterUpdate}');
                              print('HOLECOUNTERDecrementLeft: ${_decrement}');
                            },
                            activeBgColor: [
                              Theme.of(context).hintColor.withOpacity(0.7),
                            ],
                            activeFgColor: Theme.of(context).canvasColor,
                            inactiveBgColor: Colors.grey.withOpacity(0.65),
                            inactiveFgColor: Theme.of(context).canvasColor, //grey[900],
                          ),
                        ],
                      ),
                    ),
                    // Container(
                    //   height: 35.0,
                    //   decoration: BoxDecoration(
                    //     color: Theme.of(context).canvasColor,
                    //     boxShadow: [
                    //       BoxShadow(
                    //         color: Colors.grey.withOpacity(0.2),
                    //         spreadRadius: 5,
                    //         blurRadius: 7,
                    //         offset: Offset(
                    //             0, 3), // changes position of shadow
                    //       ),
                    //     ],
                    //   ),
                    //   child: Row(
                    //     mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    //     mainAxisSize: MainAxisSize.max,
                    //     children: [
                    //       Padding(
                    //         padding: EdgeInsets.all(
                    //             2.0), //apply padding to all four sides
                    //         child: Text(
                    //           'Side',
                    //           style: TextStyle(fontSize: 20),
                    //         ),
                    //       ),
                    //       SizedBox(
                    //         width: deviceSize.width * 0.01,
                    //         // height: 0.1, // 80,
                    //       ),
                    //       ToggleSwitch(
                    //         minWidth: 75.0,
                    //         minHeight: 50.0,
                    //         fontSize: 12.0,
                    //         initialLabelIndex: _side,
                    //         cornerRadius: 3.0,
                    //         totalSwitches: 2,
                    //         labels: [
                    //           'Left',
                    //           'Right',
                    //         ],
                    //         onToggle: (index) {
                    //           sideUpdate = 'pending';
                    //           _side = index!;
                    //           setState(() {
                    //             if (_side == 0) {
                    //               _rightSide = false;
                    //               // didChangeDependencies();
                    //             } else if (_side == 1) {
                    //               _rightSide = true;
                    //               // didChangeDependencies();
                    //             }
                    //           });
                    //           print('sideUpdate: ${sideUpdate}');
                    //           print('_side: ${_side}');
                    //         },
                    //         activeBgColor: [
                    //           Theme.of(context).hintColor.withOpacity(0.7),
                    //         ],
                    //         activeFgColor: Theme.of(context).canvasColor,
                    //         inactiveBgColor:
                    //             Colors.grey.withOpacity(0.65),
                    //         inactiveFgColor: Theme.of(context).canvasColor, //grey[900],
                    //       ),
                    //     ],
                    //   ),
                    // ),
                    rowButtonBuilder(deviceSize),
                    holeButtonBuilder(deviceSize),
                    depthButtonBuilder(deviceSize, context),
                    // locationButtonBuilder(context, deviceSize),
                  ],
                ),
              ),
            ),
          ),
          Container(
            // width: deviceSize.width * 1.0,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              // crossAxisAlignment: CrossAxisAlignment.stretch, //.center,
              mainAxisSize: MainAxisSize.max,
              children: [
                SizedBox(
                    height: 30,
                    // width: deviceSize.width - 1.0,
                    child: Container(
                      child: ToggleSwitch(
                        // minWidth: deviceSize.width * 0.5,
                        customWidths: [
                          deviceSize.width * 0.498,
                          deviceSize.width * 0.498
                        ],
                        minHeight: 50.0,
                        fontSize: 30.0,
                        initialLabelIndex: _side,
                        cornerRadius: 3.0,
                        totalSwitches: 2,
                        labels: [
                          'Left',
                          'Right',
                        ],
                        onToggle: (index) {
                          sideUpdate = 'pending';
                          _side = index!;
                          setState(() {});
                          print('sideUpdate: ${sideUpdate}');
                          print('_side: ${_side}');
                        },
                        activeBgColor: [
                          Theme.of(context).hintColor.withOpacity(0.7),
                        ],
                        activeFgColor: Colors.black,
                        inactiveBgColor: Colors.grey.withOpacity(0.65),
                        inactiveFgColor: Theme.of(context).canvasColor, //grey[900],
                      ),
                      // GestureDetector(
                      //   onTap: () {},
                      //   child: Padding(
                      //     padding:
                      //         const EdgeInsets.fromLTRB(8.0, 2.0, 2.0, 2.0),
                      //     child: Text(
                      //       'Left',
                      //       style: TextStyle(
                      //           fontSize: 20, color: Colors.black),
                      //       softWrap: true,
                      //       overflow: TextOverflow.visible,
                      //     ),
                      //   ),
                      // ),
                      // Row(
                      //   mainAxisAlignment:
                      //       MainAxisAlignment.spaceEvenly,
                      //   // crossAxisAlignment: CrossAxisAlignment.center,
                      //   mainAxisSize: MainAxisSize.max,
                      //   children: [
                      //     Text(
                      //       'Left',
                      //       style: TextStyle(fontSize: 20),
                      //     ),
                      //   ],
                      // ),
                    )),
              ],
            ),
          ),
          SingleChildScrollView(
            child: Column(
              children: [
                Row(
                  children: [
                    SizedBox(
                      // height: 300,
                      width: deviceSize.width * 0.5,
                      child: Container(
                        height: (drilledItemsLeft.length <= 50 && drilledItemsRight.length <= 50)
                                ? (drilledItemsLeft.length > drilledItemsRight.length)
                                  ? drilledItemsLeft.length * 8 * 20.00 < 400
                                    ? drilledItemsLeft.length * 8 * 20.00
                                    : 400
                                  : drilledItemsRight.length * 8 * 20.00 < 400
                                    ? drilledItemsRight.length * 8 * 20.00
                                    : 400
                                : 400,
                        decoration: BoxDecoration(
                          color: Theme.of(context).canvasColor,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.8),
                              spreadRadius: 0,
                              blurRadius: 2,
                              offset:
                                  Offset(1, 1), // changes position of shadow
                            ),
                          ],
                        ),
                        child: SingleChildScrollView(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisSize: MainAxisSize.max,
                            children: [
                              ListView.builder(
                                itemCount: drilledItemsLeft.length,
                                shrinkWrap: true,
                                padding: EdgeInsets.all(4.0),
                                physics: const NeverScrollableScrollPhysics(),
                                scrollDirection: Axis.vertical,
                                itemBuilder: (ctx, i) => GestureDetector(
                                  onTap: () {
                                    var drilledItemsLeftLat = drilledItemsLeft[i].drilledLatitude;
                                    var drilledItemsLeftLong = drilledItemsLeft[i].drilledLongitude;
                                    if (drilledItemsLeftLat == '') {
                                      drilledItemsLeftLat = '0';
                                    }
                                    if (drilledItemsLeftLong == '') {
                                      drilledItemsLeftLong = '0';
                                    }
                                    commentUpdate(
                                        context,
                                        deviceSize,
                                        0,
                                        drilledItemsLeft[i].drilledRow,
                                        drilledItemsLeft[i].drilledHole,
                                        drilledItemsLeft[i].drilledDepth,
                                        drilledItemsLeft[i].drilledTime,
                                        drilledItemsLeft[i].drilledComment,
                                        drilledItemsLeftLat,
                                        drilledItemsLeftLong,
                                        drilledItemsLeft[i].drillRods,
                                        drilledItemsLeft[i].drillRodsQty,
                                        drilledItemsLeft[i].drillBits,
                                        drilledItemsLeft[i].drillBitsQty,
                                        drilledItemsLeft[i].drillCouplings,
                                        drilledItemsLeft[i].drillCouplingsQty,
                                        drilledItemsLeft[i]
                                            .replaceDateTime
                                            .toString());
                                    print(
                                        'UPDATE COMMENT drilledItemsLeft[i]: ${drilledItemsLeft[i].drilledRow} : ${drilledItemsLeft[i].drilledHole} : ${drilledItemsLeft[i].drilledDepth}');
                                    // .then((buttonResponse) {});
                                    // setState(() {});
                                  },
                                  child: Column(
                                    children: [
                                      Row(
                                        children: [
                                          Text(
                                              'Row${drilledItemsLeft[i].drilledRow}:'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '  - Hole${drilledItemsLeft[i].drilledHole}:'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '    - Achieved Depth:',textAlign: TextAlign.left,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.01,
                                          // ),
                                          ),
                                          Text(
                                              '  ${drilledItemsLeft[i].drilledDepth}',textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '    - Drilled Time:',textAlign: TextAlign.left,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                          Text(
                                              '         ${drilledItemsLeft[i].drilledTime}',textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '    - Comment:',textAlign: TextAlign.left,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                          Text('              ${drilledItemsLeft[i].drilledComment}',textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ),
                                      // (drilledItemsLeft[i].drillRodsQty > 0 || drilledItemsLeft[i].drillBitsQty > 0 || drilledItemsLeft[i].drillCouplingsQty > 0) ? Row(
                                      //   children: [
                                      //     Text(
                                      //         '      - Consumables:'),
                                      //   ],
                                      // ) : SizedBox(),
                                      (drilledItemsLeft[i].drillRodsQty > 0) ? Row(
                                        children: [
                                          // Text(
                                          //     '    - DrillRods:              ${drilledItemsLeft[i].drillRodsQty}: ${drilledItemsLeft[i].drillRods}'),
                                          Text(
                                              '    - DrillRods:',
                                          textAlign: TextAlign.left,
                                          // style: TextStyle(
                                          //   // wordSpacing: 1,
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                          Text(
                                          '               ${drilledItemsLeft[i].drillRodsQty}: ${drilledItemsLeft[i].drillRods}',
                                          textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   // wordSpacing: 1,
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ) : SizedBox(),
                                      (drilledItemsLeft[i].drillBitsQty > 0) ? Row(
                                        children: [
                                          Text(
                                              '    - DrillBits:',
                                          textAlign: TextAlign.left,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                          Text(
                                          '                 ${drilledItemsLeft[i].drillBitsQty}: ${drilledItemsLeft[i].drillBits}',
                                          textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ) : SizedBox(),
                                      (drilledItemsLeft[i].drillCouplingsQty > 0) ? Row(
                                        children: [
                                          Text(
                                              '    - Couplings:',
                                          textAlign: TextAlign.left,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                          Text(
                                          '            ${drilledItemsLeft[i].drillCouplingsQty}: ${drilledItemsLeft[i].drillCouplings}',
                                          textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ) : SizedBox(),
                                      Row(
                                        children: [
                                          Text('    - Coordinates:',
                                          textAlign: TextAlign.left,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '                              ${drilledItemsLeft[i].drilledLatitude},',
                                              textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '                               ${drilledItemsLeft[i].drilledLongitude}',textAlign: TextAlign.right,
                                          // style: TextStyle(
                                          //   letterSpacing: 0.1,
                                          // ),
                                          ),
                                        ],
                                      ),
                                      Divider(),
                                    ],
                                  ),
                                ),
                                //       itemBuilder: (ctx, i) =>
                                //           (Text('${drilledItemsLeft[i]}')),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                    SizedBox(
                      // height: 300,
                      width: deviceSize.width * 0.5,
                      child: Container(
                        height: (drilledItemsLeft.length <= 50 &&
                                drilledItemsRight.length <= 50)
                            ? (drilledItemsLeft.length >
                                    drilledItemsRight.length)
                                ? drilledItemsLeft.length * 8 * 20.00 < 400
                                    ? drilledItemsLeft.length * 8 * 20.00
                                    : 400
                                : drilledItemsRight.length * 8 * 20.00 < 400
                                    ? drilledItemsRight.length * 8 * 20.00
                                    : 400
                            : 400,
                        // (drilledItemsLeft.length <= 50 &&
                        //     drilledItemsRight.length <= 50)
                        // ? (drilledItemsLeft.length >
                        //         drilledItemsRight.length)
                        //     ? drilledItemsLeft.length * 6 * 20.00 < 400
                        //         ? drilledItemsLeft.length * 6 * 20.00
                        //         : 400
                        //     : drilledItemsRight.length * 6 * 20.00 < 400
                        //         ? drilledItemsRight.length * 6 * 20.00
                        //         : 400
                        // : 400,
                        decoration: BoxDecoration(
                          color: Theme.of(context).canvasColor,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.8),
                              spreadRadius: 0,
                              blurRadius: 2,
                              offset:
                                  Offset(1, 1), // changes position of shadow
                            ),
                          ],
                        ),
                        child: SingleChildScrollView(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisSize: MainAxisSize.max,
                            children: [
                              ListView.builder(
                                itemCount: drilledItemsRight.length,
                                shrinkWrap: true,
                                padding: EdgeInsets.all(4.0),
                                physics: const NeverScrollableScrollPhysics(),
                                scrollDirection: Axis.vertical,
                                itemBuilder: (ctx, i) => GestureDetector(
                                  onTap: () {
                                    var drilledItemsRightLat = drilledItemsRight[i].drilledLatitude;
                                    var drilledItemsRightLong = drilledItemsRight[i].drilledLongitude;
                                    if (drilledItemsRightLat == '') {
                                      drilledItemsRightLat = '0';
                                    }
                                    if (drilledItemsRightLong == '') {
                                      drilledItemsRightLong = '0';
                                    }
                                    commentUpdate(
                                        context,
                                        deviceSize,
                                        1,
                                        drilledItemsRight[i].drilledRow,
                                        drilledItemsRight[i].drilledHole,
                                        drilledItemsRight[i].drilledDepth,
                                        drilledItemsRight[i].drilledTime,
                                        drilledItemsRight[i].drilledComment,
                                        drilledItemsRightLat,
                                        drilledItemsRightLong,
                                        drilledItemsRight[i].drillRods,
                                        drilledItemsRight[i].drillRodsQty,
                                        drilledItemsRight[i].drillBits,
                                        drilledItemsRight[i].drillBitsQty,
                                        drilledItemsRight[i].drillCouplings,
                                        drilledItemsRight[i].drillCouplingsQty,
                                        drilledItemsRight[i]
                                            .replaceDateTime
                                            .toString());
                                    // print(
                                    //     'UPDATE COMMENT drilledItemsLeft[i]: ${drilledItemsLeft[i].drilledRow} : ${drilledItemsLeft[i].drilledHole} : ${drilledItemsLeft[i].drilledDepth}');
                                    // .then((buttonResponse) {});
                                  },
                                  child: Column(
                                    children: [
                                      Row(
                                        children: [
                                          Text(
                                              'Row${drilledItemsRight[i].drilledRow}:'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '  - Hole${drilledItemsRight[i].drilledHole}:'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '      - Achieved Depth: ${drilledItemsRight[i].drilledDepth}'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '      - Drilled Time: ${drilledItemsRight[i].drilledTime}'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '      - Comment: ${drilledItemsRight[i].drilledComment}'),
                                        ],
                                      ),
                                      // (drilledItemsRight[i].drillRodsQty > 0 || drilledItemsRight[i].drillBitsQty > 0 || drilledItemsRight[i].drillCouplingsQty > 0) ? Row(
                                      //   children: [
                                      //     Text(
                                      //         '      - Consumables:'),
                                      //   ],
                                      // ) : SizedBox(),
                                      (drilledItemsRight[i].drillRodsQty > 0) ? Row(
                                        children: [
                                          Text(
                                              '      - DrillRods:  ${drilledItemsRight[i].drillRodsQty}: ${drilledItemsRight[i].drillRods}'),
                                          // Text(
                                          // '            ${drilledItemsRight[i].drillRods}'),
                                        ],
                                      ) : SizedBox(),
                                      (drilledItemsRight[i].drillBitsQty > 0) ? Row(
                                        children: [
                                          Text(
                                              '      - DrillBits:  ${drilledItemsRight[i].drillBitsQty}: ${drilledItemsRight[i].drillBits}'),
                                          // Text(
                                          // '            ${drilledItemsRight[i].drillBits}'),
                                        ],
                                      ) : SizedBox(),
                                      (drilledItemsRight[i].drillCouplingsQty > 0) ? Row(
                                        children: [
                                          Text(
                                              '      - Couplings:  ${drilledItemsRight[i].drillCouplingsQty}: ${drilledItemsRight[i].drillCouplings}'),
                                          // Text(
                                          // '            ${drilledItemsRight[i].drillCouplings}'),
                                        ],
                                      ) : SizedBox(),
                                      Row(
                                        children: [
                                          Text('      - Coordinates:'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '            ${drilledItemsRight[i].drilledLatitude},'),
                                        ],
                                      ),
                                      Row(
                                        children: [
                                          Text(
                                              '            ${drilledItemsRight[i].drilledLongitude}'),
                                        ],
                                      ),
                                      Divider(),
                                    ],
                                  ),
                                ),
                                //       itemBuilder: (ctx, i) =>
                                //           (Text('${drilledItemsRight[i]}')),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  // width: deviceSize.width * 0.00,
                  height: 6.0, // 80,
                ),
                // Spacer(),
                Row(
                  mainAxisAlignment: (_currentlyDrilling || _pausedDrilling)
                      ? MainAxisAlignment.spaceEvenly
                      : MainAxisAlignment.center,
                  children: [
                    !_currentlyDrilling
                        ? Column(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            // mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Container(
                                child: ThemedElevatedButton(
                                  focusNode: timerBox,
                                  text: _currentlyDrilling
                                        ? _pausedDrilling
                                            ? 'Continue Drilling'
                                            : 'Pause Drilling'
                                        : 'Start Drilling',
                                  onPressed: () => {
                                    if (_currentlyDrilling)
                                      {
                                        if (_pausedDrilling)
                                          {
                                            print('DRILLING UNPAUSED'),
                                            _startTimer(),
                                            setState(() {
                                              _pausedDrilling = false;
                                            }),
                                          }
                                        else
                                          {
                                            print('DRILLING PAUSED'),
                                            _stopTimer(),
                                            setState(() {
                                              _pausedDrilling = true;
                                            }),
                                          }
                                      }
                                    else
                                      {
                                        print('DRILLING START'),
                                        _startDateTime = (int.parse(new DateTime.now().millisecondsSinceEpoch.toString())/1000).round().toString(),
                                            // .substring(0, 10),
                                        _startTimer(),
                                        print('LOCATION START startDateTime: ${_startDateTime}'),
                                        setState(() {
                                          _currentlyDrilling = true;
                                          _pausedDrilling = false;
                                          getLocation().then((value) {
                                            print('LOCATION START');
                                            print(value.latitude);
                                            print(value.longitude);
                                            _latitude = value.latitude;
                                            _longitude = value.longitude;
                                            _currentLatitude = _latitude;
                                            _currentLongitude = _longitude;
                                          });
                                        }),
                                      }
                                  },
                                ),
                                // RaisedButton(
                                //   focusNode: timerBox,
                                //   child: Text(_currentlyDrilling
                                //       ? _pausedDrilling
                                //           ? 'Continue Drilling'
                                //           : 'Pause Drilling'
                                //       : 'Start Drilling'),
                                //   onPressed: () {
                                //     if (_currentlyDrilling) {
                                //       if (_pausedDrilling) {
                                //         print('DRILLING UNPAUSED');
                                //         _startTimer();
                                //         setState(() {
                                //           _pausedDrilling = false;
                                //         });
                                //       } else {
                                //         print('DRILLING PAUSED');
                                //         _stopTimer();
                                //         setState(() {
                                //           _pausedDrilling = true;
                                //         });
                                //       }
                                //     } else {
                                //       print('DRILLING START');
                                //       _startDateTime = DateTime.now()
                                //           .millisecondsSinceEpoch
                                //           .toString()
                                //           .substring(0, 10);
                                //       _startTimer();
                                //       setState(() {
                                //         _currentlyDrilling = true;
                                //         _pausedDrilling = false;
                                //       });
                                //       // didChangeDependencies();
                                //     }
                                //   },
                                //   shape: RoundedRectangleBorder(
                                //     borderRadius: BorderRadius.circular(10),
                                //   ),
                                //   padding: EdgeInsets.symmetric(
                                //       horizontal: 30.0, vertical: 8.0),
                                //   color: Theme.of(context).hintColor.withOpacity(0.7),
                                //   textColor: Colors.black,
                                // ),
                              ),
                              const SizedBox(
                                height: 0,
                              ),
                            ],
                          )
                        : Column(
                            children: [
                              Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  // Display the result
                                  Text(
                                    _resultTimer,
                                    style: const TextStyle(
                                      fontSize: 30.0,
                                    ),
                                  ),
                                  const SizedBox(
                                    height: 0.0,
                                  ),
                                ],
                              ),
                              Row(
                                children: [
                                  Column(
                                    children: [
                                      Container(
                                        child: ThemedElevatedButton(
                                          focusNode: timerBox,
                                          text:
                                            _currentlyDrilling
                                                ? _pausedDrilling
                                                    ? 'Continue Drilling'
                                                    : 'Pause Drilling'
                                                : 'Start Drilling',
                                          onPressed: () => {
                                            if (_currentlyDrilling)
                                              {
                                                if (_pausedDrilling)
                                                  {
                                                    print('DRILLING UNPAUSED'),
                                                    _startTimer(),
                                                    setState(() {
                                                      _pausedDrilling = false;
                                                    }),
                                                  }
                                                else
                                                  {
                                                    print('DRILLING PAUSED'),
                                                    _stopTimer(),
                                                    setState(() {
                                                      _pausedDrilling = true;
                                                    }),
                                                  }
                                              }
                                            else
                                              {
                                                print('DRILLING START'),
                                                _startDateTime = (int.parse(new DateTime.now().millisecondsSinceEpoch.toString())/1000).round().toString(),
                                                _startTimer(),
                                                getLocation().then((value) {
                                                  print('LOCATION START startDateTime: ${_startDateTime}');
                                                  print(value.latitude);
                                                  print(value.longitude);
                                                  setState(() {
                                                    _latitude = value.latitude;
                                                    _longitude =
                                                        value.longitude;
                                                    _currentLatitude =
                                                        _latitude;
                                                    _currentLongitude =
                                                        _longitude;
                                                  });
                                                }),
                                                setState(() {
                                                  _currentlyDrilling = true;
                                                  _pausedDrilling = false;
                                                }),
                                              }
                                          },
                                        ),
                                      ),
                                      const SizedBox(
                                        height: 2,
                                      ),
                                    ],
                                  ),
                                  Column(
                                    children: [
                                      Container(
                                        child: ThemedElevatedButton(
                                          text: 'Stop Drilling',
                                          onPressed: () async => {
                                            print('DRILLING STOP'),
                                            _endDateTime = (int.parse(new DateTime.now().millisecondsSinceEpoch.toString())/1000).round().toString(),
                                            print('LOCATION END endDateTime: ${_endDateTime}'),
                                            _stopTimer(),
                                            _resetTimer(),
                                            setState(() {
                                              _currentlyDrilling = false;
                                              _pausedDrilling = false;
                                            }),
                                            await achievedDepthAlert(context, deviceSize),
                                            if (_decrement)
                                              {
                                                if (_holeDecrementSelected -
                                                        1 ==
                                                    0)
                                                  {
                                                    // if (_rowSelected + 1 <= int.parse(rowItems.last))
                                                    //   {
                                                    setState(() {
                                                      _storeHoleDecrementSelected =
                                                          _holeDecrementSelected;
                                                      _storeRowSelected =
                                                          _rowSelected;
                                                      // _holeDecrementSelected = int.parse(holeItemsReversed.first);
                                                      // add 10 holes
                                                      // _rowSelected =
                                                      //     _rowSelected + 1;
                                                      print(
                                                          '_holeIncDecUpdate: _holeIncDecUpdate = true');
                                                      _holeIncDecUpdate = true;
                                                    }),
                                                    //   }
                                                    // else
                                                    //   {
                                                    //     setState(() {
                                                    //       _storeHoleDecrementSelected = _holeDecrementSelected;
                                                    //       _storeRowSelected = _rowSelected;
                                                    //       print('_holeIncDecUpdate: _holeIncDecUpdate = true');
                                                    //       _holeIncDecUpdate = true;
                                                    //     }),
                                                    //   }
                                                  }
                                                else
                                                  {
                                                    setState(() {
                                                      if (_holeDecrementSelected == 100)
                                                        _holeDecrementSelected = 100;
                                                      _storeHoleDecrementSelected = _holeDecrementSelected;
                                                      _storeRowSelected = _rowSelected;
                                                      _holeDecrementSelected = _holeDecrementSelected - 1;
                                                      print(
                                                          '_holeIncDecUpdate: _holeIncDecUpdate = true');
                                                      _holeIncDecUpdate = true;
                                                    }),
                                                  }
                                              }
                                            else
                                              {
                                                print(
                                                    '_holeIncDecUpdate: _holeIncrementSelected ${_holeIncrementSelected} + 1 > holeItems.last ${holeItems.last}'),
                                                if (_holeIncrementSelected + 1 >
                                                    int.parse(holeItems.last))
                                                  {
                                                    addRowsAndHoles(false, true),
                                                    print(
                                                        '_holeIncDecUpdate: _rowSelected ${_rowSelected} + 1 <= rowItems.last ${rowItems.last}'),
                                                    // if (_rowSelected + 1 <= int.parse(rowItems.last))
                                                    // {
                                                    setState(() {
                                                      _storeHoleIncrementSelected =
                                                          _holeIncrementSelected;
                                                      _storeRowSelected =
                                                          _rowSelected;
                                                      _holeIncrementSelected =
                                                          _holeIncrementSelected +
                                                              1;
                                                      //  = int.parse(holeItems.first);
                                                      // add 10 holes
                                                      // _rowSelected =
                                                      //     _rowSelected + 1;
                                                      print(
                                                          '_holeIncDecUpdate: _holeIncDecUpdate = true');
                                                      _holeIncDecUpdate = true;
                                                    }),
                                                    print(
                                                        'HOLEUPDATE: _storeHoleIncrementSelected: ${_storeHoleIncrementSelected}, _storeRowSelected: ${_storeRowSelected}, _holeIncrementSelected: ${_holeIncrementSelected}\n'),
                                                    //   }
                                                    // else
                                                    //   {
                                                    //     setState(() {
                                                    //       _storeHoleIncrementSelected = _holeIncrementSelected;
                                                    //       _storeRowSelected = _rowSelected;
                                                    //       print('_holeIncDecUpdate: _holeIncDecUpdate = true');
                                                    //       _holeIncDecUpdate = true;
                                                    //     }),
                                                    //   }
                                                  }
                                                else
                                                  {
                                                    setState(() {
                                                      if (_holeIncrementSelected == 0)
                                                        _holeIncrementSelected = 1;
                                                      _storeHoleIncrementSelected = _holeIncrementSelected;
                                                      _storeRowSelected = _rowSelected;
                                                      print(
                                                          'HOLESETTING BEFORE _holeIncrementSelected: ${_holeIncrementSelected}');
                                                      _holeIncrementSelected = _holeIncrementSelected + 1;
                                                      print(
                                                          'HOLESETTING AFTER _holeIncrementSelected: ${_holeIncrementSelected}');
                                                      _holeIncDecUpdate = true;
                                                    }),
                                                  }
                                              },
                                            didChangeDependencies(),
                                          },
                                        ),
                                      ),
                                      const SizedBox(
                                        height: 2,
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ],
                          ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
      bottomNavigationBar: BottomAppBar(
        child: (drilledItemsLeft.length > 0 || drilledItemsRight.length > 0)
            ? Row(
                children: [
                  Spacer(),
                  ThemedElevatedButton(
                    onPressed: () {},
                    text: 'CSV',
                  ),
                  const SizedBox(
                    width: 6,
                  ),
                  ThemedElevatedButton(
                    onPressed: () {
                      // didChangeDependencies();
                      print(
                          'PdfCreator drillJobId: ${_drillJobId}, employee: ${_employee}, drillId: ${_drillId}, siteType: ${_siteType}, siteTypeOther: ${_siteTypeOther}, drillSize: ${_drillSize}, spacing: ${_spacing}, burden: ${_burden}, bench: ${_bench}, submittedDateTime: ${_submittedDateTime}, totalDrillTime: ${_totalDrillTime}, submitted: ${_submitted}, completedChecklist: ${_completedChecklist}, rowCount: ${_rowCount}, holeCount: ${_holeCounter}, firstChecklist: ${_firstChecklist}, secondChecklist: ${_secondChecklist}, thirdChecklist: ${_thirdChecklist}, fourthChecklist: ${_fourthChecklist}, fifthChecklist: ${_fifthChecklist}, machineHours: ${_machineHours}, skipCheckList: ${_skipCheckList}, skipCheckListReason: ${_skipCheckListReason}, drilledItemsLeft: ${drilledItemsLeft[0].drilledTime}, drilledItemsRight: $drilledItemsRight');
                      print('PdfCreator drilledItemsList: ${drilledItemsList[23].drilledComment}');
                      print('PdfCreator drilledItemsList.first.drilledStartTime: ${DateTime.fromMillisecondsSinceEpoch(int.parse(drilledItemsList.first.drilledStartTime.toString())*1000).toString()}');
                      print('PdfCreator drilledItemsList.first.drilledEndTime: ${DateTime.fromMillisecondsSinceEpoch(int.parse(drilledItemsList.first.drilledEndTime.toString())*1000).toString()}');
                      print('PdfCreator drilledItemsList.last.drilledStartTime: ${DateTime.fromMillisecondsSinceEpoch(int.parse(drilledItemsList.last.drilledStartTime.toString())*1000).toString()}');
                      print('PdfCreator drilledItemsList.last.drilledEndTime: ${DateTime.fromMillisecondsSinceEpoch(int.parse(drilledItemsList.last.drilledEndTime.toString())*1000).toString()}');
                      Navigator.pushNamed(
                        context,
                        PdfPreviewPage.routeName,
                        arguments: PdfCreator(
                          drillJobId: _drillJobId,
                          employee: _employee,
                          drillId: _drillId,
                          siteType: _siteType,
                          siteTypeOther: _siteTypeOther,
                          drillSize: _drillSize,
                          spacing: _spacing,
                          burden: _burden,
                          bench: _bench,
                          submittedDateTime: _submittedDateTime,
                          totalDrillTime: _totalDrillTime,
                          submitted: _submitted,
                          completedChecklist: _completedChecklist,
                          rowCount: _rowCount,
                          holeCount: _holeCounter,
                          firstChecklist: _firstChecklist,
                          secondChecklist: _secondChecklist,
                          thirdChecklist: _thirdChecklist,
                          fourthChecklist: _fourthChecklist,
                          fifthChecklist: _fifthChecklist,
                          machineHours: _machineHours,
                          skipCheckList: _skipCheckList,
                          skipCheckListReason: _skipCheckListReason,
                          drilledItemsLeft: drilledItemsLeft,
                          drilledItemsRight: drilledItemsRight,
                          drilledItemsList: drilledItemsList,
                        ),
                      );
                    },
                    text: 'PDF',
                  ),
                  Spacer(),
                  Spacer(),
                  Spacer(),
                  // Spacer(),
                  ThemedElevatedButton(
                    onPressed: () {},
                    text: 'Save',
                  ),
                  const SizedBox(
                    width: 6,
                  ),
                  // Spacer(),
                  ThemedElevatedButton(
                    onPressed: () {},
                    text: 'Submit',
                  ),
                  Spacer(),
                ],
              )
            : null,
        // color: Theme.of(context).primaryColor.withOpacity(0.8),
      ),
    );
  }

  Column locationButtonBuilder(BuildContext context, Size deviceSize) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        (_currentLatitude == null ||
                _currentLatitude == 0 ||
                _currentLongitude == null && _currentLongitude == 0)
            ? Container(
                child: ThemedElevatedButton(
                  focusNode: locationBox,
                  onPressed: () {
                    getLocation().then((value) {
                      print('LOCATION START');
                      print(value.latitude);
                      print(value.longitude);
                      setState(() {
                        _latitude = value.latitude;
                        _longitude = value.longitude;
                        _currentLatitude = _latitude;
                        _currentLongitude = _longitude;
                      });
                    });
                    print('LOCATION START');
                    FocusScope.of(context).requestFocus(timerBox);
                  },
                  text: 'Set Location',
                ),
              )
            : Container(
                child: Column(
                  children: [
                    Container(
                      height: 35.0,
                      decoration: BoxDecoration(
                        color: Theme.of(context).canvasColor,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.2),
                            spreadRadius: 5,
                            blurRadius: 7,
                            offset: Offset(0, 3), // changes position of shadow
                          ),
                        ],
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          Padding(
                            padding: EdgeInsets.fromLTRB(
                                deviceSize.width * 0.01, 0.0, 0.01, 0.0),
                            child: Text(
                              'Coordinates: ${_currentLatitude.toStringAsFixed(10)}, ${_currentLongitude.toStringAsFixed(10)}',
                              // 'Lat: ${_latitude.toStringAsFixed(8)}, Long: ${_longitude.toStringAsFixed(8)}',
                              style: TextStyle(
                                fontSize: 20,
                                // fontWeight: FontWeight.bold,
                              ),
                            ),
                          )
                        ],
                      ),
                    ),
                    Container(
                      child: ThemedElevatedButton(
                        focusNode: locationBox,
                        onPressed: () {
                          getLocation().then((value) {
                            print('LOCATION START');
                            print(value.latitude);
                            print(value.longitude);
                            setState(() {
                              _latitude = value.latitude;
                              _longitude = value.longitude;
                              _currentLatitude = _latitude;
                              _currentLongitude = _longitude;
                            });
                          });
                          print('LOCATION START');
                          FocusScope.of(context).requestFocus(timerBox);
                        },
                        text: 'Set Location',
                      ),
                    ),
                  ],
                ),
              ),
        SizedBox(
          // width: deviceSize.width * 0.00,
          height: 6.0, // 80,
        ),
      ],
    );
  }

  Column depthButtonBuilder(Size deviceSize, BuildContext context) {
    return Column(
      children: [
        Container(
          height: 35.0,
          decoration: BoxDecoration(
            color: Theme.of(context).canvasColor,
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.2),
                spreadRadius: 5,
                blurRadius: 7,
                offset: Offset(0, 3), // changes position of shadow
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            // crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisSize: MainAxisSize.max,
            children: [
              Padding(
                padding: EdgeInsets.fromLTRB(
                    deviceSize.width * 0.01, 0.0, 0.01, 0.0),
                child: Text(
                  'Planned depth(m)',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              Flexible(
                flex: 1,
                child: Container(
                  alignment: Alignment.centerRight,
                  child: SizedBox(
                    width: 75.0 * 2,
                    child: TextFormField(
                      focusNode: depthBox,
                      controller: _defDepthController,
                      onTap: () => _defDepthController.selection =
                          TextSelection(
                              baseOffset: 0,
                              extentOffset: _defDepthController.text.length),
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.fromLTRB(
                            deviceSize.width * 0.08,
                            0.0,
                            deviceSize.width * 0.02,
                            12.0),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.all(Radius.circular(1))),
                      ),
                      textInputAction: TextInputAction.next,
                      onFieldSubmitted: (String newDepth) {
                        // print('DEPTH ENTERED: ${newDepth}');
                        // _depth = double.parse(newDepth);
                        // _depthSet = true;
                        // _defDepthController.text =
                        //     newDepth;
                        FocusScope.of(context).requestFocus(locationBox);
                      },
                      validator: (newDepth) {
                        print('VALIDATOR: $newDepth');
                        if (newDepth!.isEmpty) {
                          return 'Please enter a value.';
                        }
                        if (int.tryParse(newDepth) == null) {
                          return 'Please enter a valid number.';
                        }
                        if (int.parse(newDepth) <= 0) {
                          return 'Please enter a number greater than zero.';
                        }
                        return null;
                      },
                      keyboardType: TextInputType.number,
                      onChanged: (String newDepth) {
                        print('DEPTH ENTERED: ${newDepth}');
                        _depth = double.parse(newDepth);
                        // _depthSet = true;
                        // _defDepthController.text =
                        //     newDepth;
                      },
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
        (_currentLatitude != null &&
                _currentLongitude != null &&
                (_currentLatitude != 0 && _currentLongitude != 0))
            ? Container(
                height: 35.0,
                decoration: BoxDecoration(
                  color: Theme.of(context).canvasColor,
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.2),
                      spreadRadius: 5,
                      blurRadius: 7,
                      offset: Offset(0, 3), // changes position of shadow
                    ),
                  ],
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Padding(
                      padding: EdgeInsets.fromLTRB(
                          deviceSize.width * 0.01, 0.0, 0.01, 0.0),
                      child: Text(
                        'Coordinates: ${_currentLatitude.toStringAsFixed(10)}, ${_currentLongitude.toStringAsFixed(10)}',
                        // 'Lat: ${_latitude.toStringAsFixed(8)}, Long: ${_longitude.toStringAsFixed(8)}',
                        style: TextStyle(
                          fontSize: 20,
                          // fontWeight: FontWeight.bold,
                        ),
                      ),
                    )
                  ],
                ),
              )
            : SizedBox(height: 0.0),
      ],
    );
  }

  Column holeButtonBuilder(Size deviceSize) {
    return Column(
      children: [
        Container(
          height: 35.0,
          decoration: BoxDecoration(
            color: Theme.of(context).canvasColor,
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.2),
                spreadRadius: 5,
                blurRadius: 7,
                offset: Offset(0, 3), // changes position of shadow
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            // crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisSize: MainAxisSize.max,
            children: [
              Padding(
                padding: EdgeInsets.fromLTRB(
                    deviceSize.width * 0.01, 0.0, 0.01, 0.0),
                child: Text(
                  // (_singleHoleSet &&
                  (_currentHole != null &&
                          _currentHole != 0 &&
                          _holesSet &&
                          holeItems.isNotEmpty &&
                          holeItemsReversed.isNotEmpty)
                      ? 'Hole #'
                      : 'Enter amount of holes',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              Flexible(
                // mainAxis
                flex: 1,
                child:
                    // (_singleHoleSet &&
                    (_currentHole != null &&
                            _currentHole != 0 &&
                            _holesSet &&
                            holeItems.isNotEmpty &&
                            holeItemsReversed.isNotEmpty)
                        ? Container(
                            alignment: Alignment.centerRight,
                            child: SizedBox(
                              width: 75.0 * 2,
                              child: DropdownButtonFormField(
                                focusNode: holeBox,
                                decoration: InputDecoration(
                                  contentPadding: EdgeInsets.fromLTRB(
                                      deviceSize.width * 0.08,
                                      0.0,
                                      deviceSize.width * 0.02,
                                      12.0),
                                  border: OutlineInputBorder(
                                    borderRadius:
                                        BorderRadius.all(Radius.circular(1)),
                                  ),
                                ),
                                dropdownColor:
                                    const Color.fromRGBO(255, 255, 255, 1),
                                value: _decrement
                                    ? (_holeDecrementSelected != null &&
                                            _holeDecrementSelected != 0)
                                        ? _holeDecrementSelected.toString()
                                        : holeItemsReversed.isNotEmpty
                                            ? holeItemsReversed.first
                                            : _holeDecrementSelected //'1'
                                    : (_holeIncrementSelected != null &&
                                            _holeIncrementSelected != 0)
                                        ? _holeIncrementSelected.toString()
                                        : holeItems.isNotEmpty
                                            ? holeItems.first
                                            : _holeIncrementSelected, //'1',
                                onChanged: (newHole) {
                                  print('HOLENUMBER ENTERED: ${newHole}');
                                  setState(() {
                                    _currentHole =
                                        int.parse(newHole.toString()); // TK
                                    _hole = int.parse(newHole.toString());
                                    if (_hole != null && _hole > 0) {
                                      _singleHoleSet = true;
                                      if (_decrement) {
                                        _holeDecrementSelected = _currentHole;
                                      } else {
                                        _holeIncrementSelected = _currentHole;
                                      }
                                    }
                                    //  else {
                                    //   _singleHoleSet = false;
                                    // }
                                  });
                                },
                                items: _decrement
                                    ? holeItemsReversed
                                        .map<DropdownMenuItem<String>>(
                                            (itemone) {
                                        // if (itemone != null) {
                                        return DropdownMenuItem(
                                          value: itemone.toString(),
                                          child: Text(
                                            itemone.toString(),
                                            style: TextStyle(fontSize: 18),
                                          ),
                                        );
                                        // } else {  // TK
                                        //   return null;
                                        // }
                                      }).toList()
                                    : holeItems.map<DropdownMenuItem<String>>(
                                        (itemone) {
                                        // if (itemone != null) {
                                        return DropdownMenuItem(
                                          value: itemone.toString(),
                                          child: Text(
                                            itemone.toString(),
                                            style: TextStyle(fontSize: 18),
                                          ),
                                        );
                                        // } else {  // TK
                                        //   return null;
                                        // }
                                      }).toList(),
                              ),
                            ),
                          )
                        : Container(
                            alignment: Alignment.centerRight,
                            child: SizedBox(
                              width: 75.0 * 2,
                              child: TextFormField(
                                focusNode: holeBox,
                                decoration: InputDecoration(
                                  contentPadding: EdgeInsets.fromLTRB(
                                      deviceSize.width * 0.08,
                                      0.0,
                                      deviceSize.width * 0.02,
                                      12.0),
                                  border: OutlineInputBorder(
                                      borderRadius:
                                          BorderRadius.all(Radius.circular(1))),
                                ),
                                textInputAction: TextInputAction.next,
                                keyboardType: TextInputType.number,
                                onFieldSubmitted: (String newHole) {
                                  if (newHole.length > 0) {
                                    setState(() {
                                      _currentHole = int.parse(newHole);
                                      _hole = _currentHole;

                                      if (_hole != null && _hole > 0) {
                                        _singleHoleSet = true;
                                      } else {
                                        _singleHoleSet = false;
                                      }
                                    });
                                  }
                                },
                                validator: (newHole) {
                                  print('VALIDATOR: $newHole');
                                  if (newHole!.isEmpty) {
                                    return 'Please enter a value.';
                                  }
                                  if (int.tryParse(newHole) == null) {
                                    return 'Please enter a valid number.';
                                  }
                                  if (int.parse(newHole) <= 0) {
                                    return 'Please enter a number greater than zero.';
                                  }
                                  return null;
                                },
                                onChanged: (String newHole) {
                                  print('HOLE LEFT ENTERED: ${newHole}');
                                  if (newHole.length > 0) {
                                    setState(() {
                                      _currentHole = int.parse(newHole);
                                      _hole = _currentHole;

                                      if (_hole != null && _hole > 0) {
                                        _singleHoleSet = true;
                                      } else {
                                        _singleHoleSet = false;
                                      }
                                    });
                                  }
                                },
                              ),
                            ),
                          ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Column rowButtonBuilder(Size deviceSize) {
    return Column(
      children: [
        Container(
          height: 35.0,
          decoration: BoxDecoration(
            color: Theme.of(context).canvasColor,
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.2),
                spreadRadius: 5,
                blurRadius: 7,
                offset: Offset(0, 3), // changes position of shadow
              ),
            ],
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            mainAxisSize: MainAxisSize.max,
            children: [
              Padding(
                padding: EdgeInsets.fromLTRB(
                    deviceSize.width * 0.01, 0.0, 0.01, 0.0),
                child: Text(
                  'Row  #',
                  style: TextStyle(fontSize: 20),
                ),
              ),
              Flexible(
                flex: 1,
                child: Container(
                  alignment: Alignment.centerRight,
                  child: SizedBox(
                    width: 75.0 * 2,
                    child: TextFormField(
                      focusNode: rowBox,
                      controller: _defRowController,
                      onTap: () => _defRowController.selection = TextSelection(
                          baseOffset: 0,
                          extentOffset: _defRowController.text.length),
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.fromLTRB(
                            deviceSize.width * 0.08,
                            0.0,
                            deviceSize.width * 0.02,
                            12.0),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.all(Radius.circular(1))),
                      ),
                      textInputAction: TextInputAction.next,
                      keyboardType: TextInputType.number,
                      onFieldSubmitted: (String newRow) {},
                      validator: (newRow) {
                        print('VALIDATOR: $newRow');
                        if (newRow!.isEmpty) {
                          return 'Please enter a value.';
                        }
                        if (int.tryParse(newRow) == null) {
                          return 'Please enter a valid number.';
                        }
                        if (int.parse(newRow) <= 0) {
                          return 'Please enter a number greater than zero.';
                        }
                        return null;
                      },
                      onChanged: (newRow) {
                        print('ROW LEFT ENTERED: ${newRow}');
                        if (newRow.length > 0) {
                          setState(() {
                            _currentRow = int.parse(newRow);
                            _row = int.parse(newRow); //_currentRow;
                            if (_row != null && _row > 0) {
                              _singleRowSet = true;
                            } else {
                              _singleRowSet = false;
                            }
                          });
                        }
                      },
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Future<String?> achievedDepthAlert(BuildContext context, Size deviceSize) {
    return showGeneralDialog<String>(
      context: context,
      pageBuilder: (BuildContext buildContext, Animation animation, Animation secondaryAnimation) {
        return Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Expanded(
                flex: 1,
                child: Container(
                  child: AlertDialog(
                    title: const Text('Finalize hole'),
                    content: SizedBox(
                      height: deviceSize.height * 0.2,
                      width: deviceSize.width * 0.8,
                      child: SizedBox(
                        child: TextField(
                          focusNode: achievedDepthBox,
                          keyboardType: TextInputType.numberWithOptions(),
                          minLines: 1,
                          maxLines: 1,
                          onChanged: (newAchievedDepth) {
                            print('ACHIEVEDDEPTH ENTERED: ${newAchievedDepth}');
                            double _currentAchievedDepth = double.parse(newAchievedDepth);
                            _depthAchieved = _currentAchievedDepth;
                          },
                          decoration: InputDecoration(
                            hintText: "Enter achieved depth", // ${deviceSize.width}",
                            filled: true,
                          ),
                        ),
                      ),
                    ),
                    actions: <Widget>[
                      TextButton(
                        child: Text('${'Consumables'}'),
                        onPressed: () => showGeneralDialog<String>(
                          context: context,
                          pageBuilder: (BuildContext buildContext, Animation animation, Animation secondaryAnimation) {
                            return Center(
                              child: Container(
                                child: Column(
                                  mainAxisSize: MainAxisSize.max, // TK .min,
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                  Expanded(
                                    flex: 1,
                                    child: Container(
                                      child: AlertDialog(
                                        title: const Text('Consumables'),
                                        content: SizedBox(
                                          height: deviceSize.height * 0.2,
                                          width: deviceSize.width * 0.8,
                                          child: Container(
                                            height: 35.0,
                                            decoration: BoxDecoration(
                                              color: Theme.of(context).canvasColor,
                                              boxShadow: [
                                                BoxShadow(
                                                  color: Colors.grey.withOpacity(0.5),
                                                  spreadRadius: 5,
                                                  blurRadius: 7,
                                                  offset: Offset(0, 3), // changes position of shadow
                                                ),
                                              ],
                                            ),
                                            child: Column(
                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                              children: [
                                                SizedBox(
                                                  width: deviceSize.width * 0.01,
                                                ),
                                                Flexible(
                                                  flex: 1,
                                                  fit: FlexFit.tight,
                                                  child: ConstrainedBox(
                                                    constraints: const BoxConstraints(
                                                      maxHeight: double.infinity
                                                    ),
                                                    child: Row(
                                                      children: [
                                                        Padding(
                                                          padding: const EdgeInsets.fromLTRB(8.0, 8.0, 8.0, 8.0),
                                                          child: Text(
                                                            'Drill Rods',
                                                            style: TextStyle(
                                                              fontSize: 20,
                                                              color: Colors.black
                                                            ),
                                                            softWrap: true,
                                                            overflow: TextOverflow.visible,
                                                          ),
                                                        ),
                                                        Spacer(),
                                                        SizedBox(
                                                          height: deviceSize.height * 0.04,
                                                          width: deviceSize.width * 0.12,
                                                          child: Padding(
                                                            padding: const EdgeInsets.fromLTRB(4.0,0.5, 8.0, 0.5),
                                                            child: TextFormField(
                                                              controller: _drillRodsQtyController,
                                                              keyboardType: TextInputType.number,
                                                              onTap: () =>
                                                                _drillRodsQtyController.selection = TextSelection(baseOffset: 0, extentOffset: 3),
                                                                decoration: InputDecoration(
                                                                  labelText: "Qty",
                                                                  contentPadding: EdgeInsets.only(left: 10.0),
                                                                  border: OutlineInputBorder(
                                                                    borderRadius: BorderRadius.all(Radius.circular(3)),
                                                                  ),
                                                                ),
                                                                textInputAction: TextInputAction.next,
                                                                onFieldSubmitted: (String newDrillRodsQty) {
                                                                  if (newDrillRodsQty.length > 0) {
                                                                    _drillRodsQty = int.parse(newDrillRodsQty);
                                                                    _drillRodsQtyController.text = _drillRodsQty.toString();
                                                                  }
                                                                },
                                                                onChanged: (String newDrillRodsQty) {
                                                                  if (newDrillRodsQty.length > 0) {
                                                                    _drillRodsQty = int.parse(newDrillRodsQty);
                                                                    _drillRodsQtyController.text = _drillRodsQty.toString();
                                                                  }
                                                                },
                                                              ),
                                                            ),
                                                          ),
                                                          SizedBox(
                                                            width: deviceSize.width * 0.02,
                                                          ),
                                                          SizedBox(
                                                            height: deviceSize.height * 0.04,
                                                            width: deviceSize.width * 0.3,
                                                            child: Padding(
                                                              padding: const EdgeInsets.fromLTRB(4.0,0.5, 8.0, 0.5),
                                                              child: TextFormField(
                                                              controller: _drillRodsController,
                                                              keyboardType: TextInputType.text,
                                                              onTap: () =>
                                                                _drillRodsController.selection = TextSelection(baseOffset: 0, extentOffset: 3),
                                                                decoration: InputDecoration(
                                                                  labelText: "Reason",
                                                                  contentPadding: EdgeInsets.only(left: 10.0),
                                                                  border: OutlineInputBorder(
                                                                    borderRadius: BorderRadius.all(Radius.circular(3)),
                                                                  ),
                                                                ),
                                                                textInputAction: TextInputAction.next,
                                                                onFieldSubmitted: (String newDrillRods) {
                                                                  if (newDrillRods.length > 0) {
                                                                    _drillRods = newDrillRods;
                                                                    _drillRodsController.text = _drillRods.toString();
                                                                  }
                                                                },
                                                                onChanged: (String newDrillRods) {
                                                                  if (newDrillRods.length > 0) {
                                                                    _drillRods = newDrillRods;
                                                                    _drillRodsController.text = _drillRods.toString();
                                                                  }
                                                                },
                                                              ),
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                    ),
                                                  ),
                                                  Flexible(
                                                flex: 1,
                                                fit: FlexFit.tight,
                                                child: ConstrainedBox(
                                                  constraints:
                                                      const BoxConstraints(
                                                          maxHeight:
                                                              double.infinity),
                                                  child: Row(
                                                    children: [
                                                      Padding(
                                                        padding: const EdgeInsets
                                                            .fromLTRB(
                                                            8.0, 8.0, 8.0, 8.0),
                                                        child: Text(
                                                          'Drill Bits',
                                                          style: TextStyle(
                                                              fontSize: 20,
                                                              color:
                                                                  Colors.black),
                                                          softWrap: true,
                                                          overflow: TextOverflow
                                                              .visible,
                                                        ),
                                                      ),
                                                      Spacer(),
                                                      SizedBox(
                                                        height:
                                                            deviceSize.height *
                                                                0.04,
                                                        width: deviceSize.width *
                                                            0.12,
                                                        child: Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .fromLTRB(4.0,
                                                                  0.5, 8.0, 0.5),
                                                          child: TextFormField(
                                                            controller:
                                                                _drillBitsQtyController,
                                                            keyboardType:
                                                                TextInputType
                                                                    .number,
                                                            onTap: () =>
                                                                _drillBitsQtyController
                                                                        .selection =
                                                                    TextSelection(
                                                                        baseOffset:
                                                                            0,
                                                                        extentOffset:
                                                                            3),
                                                            decoration:
                                                                InputDecoration(
                                                              labelText: "Qty",
                                                              contentPadding:
                                                                  EdgeInsets.only(
                                                                      left: 10.0),
                                                              border: OutlineInputBorder(
                                                                  borderRadius: BorderRadius
                                                                      .all(Radius
                                                                          .circular(
                                                                              3))),
                                                            ),
                                                            textInputAction:
                                                                TextInputAction
                                                                    .next,
                                                            onFieldSubmitted: (String
                                                                newDrillBitsQty) {
                                                              if (newDrillBitsQty
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillBitsQty =
                                                                      int.parse(
                                                                          newDrillBitsQty);
                                                                  _drillBitsQtyController
                                                                          .text =
                                                                      _drillBitsQty
                                                                          .toString();
                                                                // });
                                                              }
                                                            },
                                                            onChanged: (String
                                                                newDrillBitsQty) {
                                                              if (newDrillBitsQty
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillBitsQty =
                                                                      int.parse(
                                                                          newDrillBitsQty);
                                                                  _drillBitsQtyController
                                                                          .text =
                                                                      _drillBitsQty
                                                                          .toString();
                                                                // });
                                                              }
                                                            },
                                                          ),
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: deviceSize.width *
                                                            0.02,
                                                      ),
                                                      SizedBox(
                                                        height:
                                                            deviceSize.height *
                                                                0.04,
                                                        width: deviceSize.width *
                                                            0.3,
                                                        child: Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .fromLTRB(4.0,
                                                                  0.5, 8.0, 0.5),
                                                          child: TextFormField(
                                                            controller:
                                                                _drillBitsController,
                                                            keyboardType:
                                                                TextInputType
                                                                    .text,
                                                            onTap: () =>
                                                                _drillBitsController
                                                                        .selection =
                                                                    TextSelection(
                                                                        baseOffset:
                                                                            0,
                                                                        extentOffset:
                                                                            3),
                                                            decoration:
                                                                InputDecoration(
                                                              labelText: "Reason",
                                                              contentPadding:
                                                                  EdgeInsets.only(
                                                                      left: 10.0),
                                                              border: OutlineInputBorder(
                                                                  borderRadius: BorderRadius
                                                                      .all(Radius
                                                                          .circular(
                                                                              3))),
                                                            ),
                                                            textInputAction:
                                                                TextInputAction
                                                                    .next,
                                                            onFieldSubmitted:
                                                                (String
                                                                    newDrillBits) {
                                                              if (newDrillBits
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillBits =
                                                                      newDrillBits;
                                                                  _drillBitsController
                                                                          .text =
                                                                      _drillBits
                                                                          .toString();
                                                                // });
                                                              }
                                                            },
                                                            onChanged:
                                                                (String
                                                                    newDrillBits) {
                                                              if (newDrillBits
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillBits =
                                                                      newDrillBits;
                                                                  _drillBitsController
                                                                          .text =
                                                                      _drillBits
                                                                          .toString();
                                                                // });
                                                              }
                                                            },
                                                          ),
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                              Flexible(
                                                flex: 1,
                                                fit: FlexFit.tight,
                                                child: ConstrainedBox(
                                                  constraints:
                                                      const BoxConstraints(
                                                          maxHeight:
                                                              double.infinity),
                                                  child: Row(
                                                    children: [
                                                      Padding(
                                                        padding: const EdgeInsets
                                                            .fromLTRB(
                                                            8.0, 8.0, 8.0, 8.0),
                                                        child: Text(
                                                          'Couplings',
                                                          style: TextStyle(
                                                              fontSize: 20,
                                                              color:
                                                                  Colors.black),
                                                          softWrap: true,
                                                          overflow: TextOverflow
                                                              .visible,
                                                        ),
                                                      ),
                                                      Spacer(),
                                                      SizedBox(
                                                        height:
                                                            deviceSize.height *
                                                                0.04,
                                                        width: deviceSize.width *
                                                            0.12,
                                                        child: Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .fromLTRB(4.0,
                                                                  0.5, 8.0, 0.5),
                                                          child: TextFormField(
                                                            controller:
                                                                _drillCouplingsQtyController,
                                                            keyboardType:
                                                                TextInputType
                                                                    .number,
                                                            onTap: () =>
                                                                _drillCouplingsQtyController
                                                                        .selection =
                                                                    TextSelection(
                                                                        baseOffset:
                                                                            0,
                                                                        extentOffset:
                                                                            3),
                                                            decoration:
                                                                InputDecoration(
                                                              labelText: "Qty",
                                                              contentPadding:
                                                                  EdgeInsets.only(
                                                                      left: 10.0),
                                                              border: OutlineInputBorder(
                                                                  borderRadius: BorderRadius
                                                                      .all(Radius
                                                                          .circular(
                                                                              3))),
                                                            ),
                                                            textInputAction:
                                                                TextInputAction
                                                                    .next,
                                                            onFieldSubmitted: (String
                                                                newDrillCouplingsQty) {
                                                              if (newDrillCouplingsQty
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillCouplingsQty =
                                                                      int.parse(
                                                                          newDrillCouplingsQty);
                                                                  _drillCouplingsQtyController
                                                                          .text =
                                                                      _drillCouplingsQty
                                                                          .toString();
                                                                // });
                                                              }
                                                            },
                                                            onChanged: (String
                                                                newDrillCouplingsQty) {
                                                              if (newDrillCouplingsQty
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillCouplingsQty =
                                                                      int.parse(
                                                                          newDrillCouplingsQty);
                                                                  _drillCouplingsQtyController
                                                                          .text =
                                                                      _drillCouplingsQty
                                                                          .toString();
                                                                // });
                                                              }
                                                            },
                                                          ),
                                                        ),
                                                      ),
                                                      SizedBox(
                                                        width: deviceSize.width *
                                                            0.02,
                                                      ),
                                                      SizedBox(
                                                        height:
                                                            deviceSize.height *
                                                                0.04,
                                                        width: deviceSize.width *
                                                            0.3,
                                                        child: Padding(
                                                          padding:
                                                              const EdgeInsets
                                                                  .fromLTRB(4.0,
                                                                  0.5, 8.0, 0.5),
                                                          child: TextFormField(
                                                            controller:
                                                                _drillCouplingsController,
                                                            keyboardType:
                                                                TextInputType
                                                                    .text,
                                                            onTap: () =>
                                                                _drillCouplingsController
                                                                        .selection =
                                                                    TextSelection(
                                                                        baseOffset:
                                                                            0,
                                                                        extentOffset:
                                                                            3),
                                                            decoration:
                                                                InputDecoration(
                                                              labelText: "Reason",
                                                              contentPadding:
                                                                  EdgeInsets.only(
                                                                      left: 10.0),
                                                              border: OutlineInputBorder(
                                                                  borderRadius: BorderRadius
                                                                      .all(Radius
                                                                          .circular(
                                                                              3))),
                                                            ),
                                                            textInputAction:
                                                                TextInputAction
                                                                    .next,
                                                            onFieldSubmitted: (String
                                                                newDrillCouplings) {
                                                              if (newDrillCouplings
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillCouplings =
                                                                      newDrillCouplings;
                                                                  _drillCouplingsController
                                                                          .text =
                                                                      _drillCouplings;
                                                                // });
                                                              }
                                                            },
                                                            onChanged: (String
                                                                newDrillCouplings) {
                                                              if (newDrillCouplings
                                                                      .length >
                                                                  0) {
                                                                // setState(() {
                                                                  _drillCouplings =
                                                                      newDrillCouplings;
                                                                  _drillCouplingsController
                                                                          .text =
                                                                      _drillCouplings;
                                                                // });
                                                              }
                                                            },
                                                          ),
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ),
                                              SizedBox(
                                                width: deviceSize.width * 0.01,
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                      actions: <Widget>[
                                        TextButton(
                                          onPressed: () {
                                            // setState(() {
                                            //   print(
                                            //       '_holeIncDecUpdate: _holeIncDecUpdate = true');
                                            //   _holeIncDecUpdate = true;
                                            // });
                                            Navigator.of(context).pop();
                                          },
                                          child: const Text('Back'),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                                                  ),
                          );
                        },
                      ),
                    ),
                    TextButton(
                      child: Text('${'Comment'}'),
                      onPressed: () => showDialog<String>(
                        barrierDismissible: true,
                        context: context,
                        builder: (BuildContext context) => Container(
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Flexible(
                                flex: 1,
                                fit: FlexFit.tight,
                                child: Container(
                                  child: AlertDialog(
                                    title: const Text('Finalize hole'),
                                    content: SizedBox(
                                      height: deviceSize.height * 0.1,
                                      child: TextField(
                                        keyboardType: TextInputType.multiline,
                                        minLines: null, //1,
                                        maxLines: null, //5,
                                        expands: true,
                                        onChanged: (newComment) => {
                                          print(
                                              'COMMENT ENTERED: ${newComment}'),
                                          // setState(() {
                                            _currentComment = newComment,
                                          // }),
                                        },
                                        decoration: InputDecoration(
                                          hintText: "Enter a comment",
                                          filled: true,
                                        ),
                                      ),
                                    ),
                                    actions: <Widget>[
                                      TextButton(
                                        onPressed: () {
                                          // setState(() {
                                          //   print(
                                          //       '_holeIncDecUpdate: _holeIncDecUpdate = true');
                                          //   _holeIncDecUpdate = true;
                                          // });
                                          Navigator.pop(context, 'Done');
                                        },
                                        child: const Text('Done'),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                    TextButton(
                      child: Text('${'Done'}'),
                      onPressed: () async {
                        setState(() {
                          print('_holeIncDecUpdate: _holeIncDecUpdate = true');
                          _holeIncDecUpdate = true;
                        });
                        Navigator.of(context).pop();
                        // _currentComment = '';
                      },
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      );
  },
  );
  }
/*
  Future<String?> commentAlert(BuildContext context, Size deviceSize) {
    return showDialog<String>(
      barrierDismissible: true,
      context: context,
      builder: (BuildContext context) => Container(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Flexible(
              flex: 1,
              fit: FlexFit.tight,
              child: Container(
                child: AlertDialog(
                  title: const Text('Finalize hole'),
                  content: SizedBox(
                    height: deviceSize.height * 0.1,
                    child: TextField(
                      keyboardType: TextInputType.multiline,
                      minLines: null, //1,
                      maxLines: null, //5,
                      expands: true,
                      onChanged: (newComment) => {
                        print('COMMENT ENTERED: ${newComment}'),
                        setState(() {
                          _currentComment = newComment;
                        }),
                      },
                      decoration: InputDecoration(
                        hintText: "Enter a comment",
                        filled: true,
                      ),
                    ),
                  ),
                  actions: <Widget>[
                    TextButton(
                      onPressed: () {
                        setState(() {
                          print('_holeIncDecUpdate: _holeIncDecUpdate = true');
                          _holeIncDecUpdate = true;
                        });
                        Navigator.pop(context, 'Done');
                      },
                      child: const Text('Done'),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
*/
/*
  Future<String?> consumablesAlert(BuildContext context, Size deviceSize) {
    return showDialog<String>(
      barrierDismissible: true,
      context: context,
      builder: (BuildContext context) => Container(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Flexible(
              flex: 1,
              fit: FlexFit.tight,
              child: Container(
                child: AlertDialog(
                  title: const Text('Consumables'),
                  content: SizedBox(
                    height: deviceSize.height * 0.20,
                    width: deviceSize.width * 0.8,
                    child: Container(
                      height: 35.0,
                      decoration: BoxDecoration(
                        color: Theme.of(context).canvasColor,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.5),
                            spreadRadius: 5,
                            blurRadius: 7,
                            offset: Offset(0, 3), // changes position of shadow
                          ),
                        ],
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          SizedBox(
                            width: deviceSize.width * 0.01,
                          ),
                          Flexible(
                            flex: 1,
                            fit: FlexFit.tight,
                            child: ConstrainedBox(
                              constraints: const BoxConstraints(
                                  maxHeight: double.infinity),
                              child: Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.fromLTRB(
                                        8.0, 8.0, 8.0, 8.0),
                                    child: Text(
                                      'Drill Rods',
                                      style: TextStyle(
                                          fontSize: 20, color: Colors.black),
                                      softWrap: true,
                                      overflow: TextOverflow.visible,
                                    ),
                                  ),
                                  Spacer(),
                                  SizedBox(
                                    height: deviceSize.height * 0.04,
                                    width: deviceSize.width * 0.12,
                                    child: Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          4.0, 0.5, 8.0, 0.5),
                                      child: TextFormField(
                                        controller: _drillRodsQtyController,
                                        keyboardType: TextInputType.number,
                                        onTap: () =>
                                            _drillRodsQtyController.selection =
                                                TextSelection(
                                                    baseOffset: 0,
                                                    extentOffset: 3),
                                        decoration: InputDecoration(
                                          labelText: "Qty",
                                          contentPadding:
                                              EdgeInsets.only(left: 10.0),
                                          border: OutlineInputBorder(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(3))),
                                        ),
                                        textInputAction: TextInputAction.next,
                                        onFieldSubmitted:
                                            (String newDrillRodsQty) {
                                          if (newDrillRodsQty.length > 0) {
                                            setState(() {
                                              _drillRodsQty =
                                                  int.parse(newDrillRodsQty);
                                              _drillRodsQtyController.text =
                                                  _drillRodsQty.toString();
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                  SizedBox(
                                    width: deviceSize.width * 0.02,
                                  ),
                                  SizedBox(
                                    height: deviceSize.height * 0.04,
                                    width: deviceSize.width * 0.3,
                                    child: Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          4.0, 0.5, 8.0, 0.5),
                                      child: TextFormField(
                                        controller: _drillRodsController,
                                        keyboardType: TextInputType.text,
                                        onTap: () =>
                                            _drillRodsController.selection =
                                                TextSelection(
                                                    baseOffset: 0,
                                                    extentOffset: 3),
                                        decoration: InputDecoration(
                                          labelText: "Reason",
                                          contentPadding:
                                              EdgeInsets.only(left: 10.0),
                                          border: OutlineInputBorder(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(3))),
                                        ),
                                        textInputAction: TextInputAction.next,
                                        onFieldSubmitted:
                                            (String newDrillRods) {
                                          if (newDrillRods.length > 0) {
                                            setState(() {
                                              _drillRods = newDrillRods;
                                              _drillRodsController.text =
                                                  _drillRods.toString();
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          Flexible(
                            flex: 1,
                            fit: FlexFit.tight,
                            child: ConstrainedBox(
                              constraints: const BoxConstraints(
                                  maxHeight: double.infinity),
                              child: Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.fromLTRB(
                                        8.0, 8.0, 8.0, 8.0),
                                    child: Text(
                                      'Drill Bits',
                                      style: TextStyle(
                                          fontSize: 20, color: Colors.black),
                                      softWrap: true,
                                      overflow: TextOverflow.visible,
                                    ),
                                  ),
                                  Spacer(),
                                  SizedBox(
                                    height: deviceSize.height * 0.04,
                                    width: deviceSize.width * 0.12,
                                    child: Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          4.0, 0.5, 8.0, 0.5),
                                      child: TextFormField(
                                        controller: _drillBitsQtyController,
                                        keyboardType: TextInputType.number,
                                        onTap: () =>
                                            _drillBitsQtyController.selection =
                                                TextSelection(
                                                    baseOffset: 0,
                                                    extentOffset: 3),
                                        decoration: InputDecoration(
                                          labelText: "Qty",
                                          contentPadding:
                                              EdgeInsets.only(left: 10.0),
                                          border: OutlineInputBorder(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(3))),
                                        ),
                                        textInputAction: TextInputAction.next,
                                        onFieldSubmitted:
                                            (String newDrillBitsQty) {
                                          if (newDrillBitsQty.length > 0) {
                                            setState(() {
                                              _drillBitsQty =
                                                  int.parse(newDrillBitsQty);
                                              _drillBitsQtyController.text =
                                                  _drillBitsQty.toString();
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                  SizedBox(
                                    width: deviceSize.width * 0.02,
                                  ),
                                  SizedBox(
                                    height: deviceSize.height * 0.04,
                                    width: deviceSize.width * 0.3,
                                    child: Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          4.0, 0.5, 8.0, 0.5),
                                      child: TextFormField(
                                        controller: _drillBitsController,
                                        keyboardType: TextInputType.text,
                                        onTap: () =>
                                            _drillBitsController.selection =
                                                TextSelection(
                                                    baseOffset: 0,
                                                    extentOffset: 3),
                                        decoration: InputDecoration(
                                          labelText: "Reason",
                                          contentPadding:
                                              EdgeInsets.only(left: 10.0),
                                          border: OutlineInputBorder(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(3))),
                                        ),
                                        textInputAction: TextInputAction.next,
                                        onFieldSubmitted:
                                            (String newDrillBits) {
                                          if (newDrillBits.length > 0) {
                                            setState(() {
                                              _drillBits = newDrillBits;
                                              _drillBitsController.text =
                                                  _drillBits.toString();
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          Flexible(
                            flex: 1,
                            fit: FlexFit.tight,
                            child: ConstrainedBox(
                              constraints: const BoxConstraints(
                                  maxHeight: double.infinity),
                              child: Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.fromLTRB(
                                        8.0, 8.0, 8.0, 8.0),
                                    child: Text(
                                      'Couplings',
                                      style: TextStyle(
                                          fontSize: 20, color: Colors.black),
                                      softWrap: true,
                                      overflow: TextOverflow.visible,
                                    ),
                                  ),
                                  Spacer(),
                                  SizedBox(
                                    height: deviceSize.height * 0.04,
                                    width: deviceSize.width * 0.12,
                                    child: Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          4.0, 0.5, 8.0, 0.5),
                                      child: TextFormField(
                                        controller:
                                            _drillCouplingsQtyController,
                                        keyboardType: TextInputType.number,
                                        onTap: () =>
                                            _drillCouplingsQtyController
                                                    .selection =
                                                TextSelection(
                                                    baseOffset: 0,
                                                    extentOffset: 3),
                                        decoration: InputDecoration(
                                          labelText: "Qty",
                                          contentPadding:
                                              EdgeInsets.only(left: 10.0),
                                          border: OutlineInputBorder(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(3))),
                                        ),
                                        textInputAction: TextInputAction.next,
                                        onFieldSubmitted:
                                            (String newDrillCouplingsQty) {
                                          if (newDrillCouplingsQty.length > 0) {
                                            setState(() {
                                              _drillCouplingsQty = int.parse(
                                                  newDrillCouplingsQty);
                                              _drillCouplingsQtyController
                                                      .text =
                                                  _drillCouplingsQty.toString();
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                  SizedBox(
                                    width: deviceSize.width * 0.02,
                                  ),
                                  SizedBox(
                                    height: deviceSize.height * 0.04,
                                    width: deviceSize.width * 0.3,
                                    child: Padding(
                                      padding: const EdgeInsets.fromLTRB(
                                          4.0, 0.5, 8.0, 0.5),
                                      child: TextFormField(
                                        controller: _drillCouplingsController,
                                        keyboardType: TextInputType.text,
                                        onTap: () => _drillCouplingsController
                                                .selection =
                                            TextSelection(
                                                baseOffset: 0, extentOffset: 3),
                                        decoration: InputDecoration(
                                          labelText: "Reason",
                                          contentPadding:
                                              EdgeInsets.only(left: 10.0),
                                          border: OutlineInputBorder(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(3))),
                                        ),
                                        textInputAction: TextInputAction.next,
                                        onFieldSubmitted:
                                            (String newDrillCouplings) {
                                          if (newDrillCouplings.length > 0) {
                                            setState(() {
                                              _drillCouplings =
                                                  newDrillCouplings;
                                              _drillCouplingsController.text =
                                                  _drillCouplings;
                                            });
                                          }
                                        },
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          SizedBox(
                            width: deviceSize.width * 0.01,
                          ),
                        ],
                      ),
                    ),
                  ),
                  actions: <Widget>[
                    TextButton(
                      onPressed: () {
                        setState(() {
                          print('_holeIncDecUpdate: _holeIncDecUpdate = true');
                          _holeIncDecUpdate = true;
                        });
                      },
                      child: const Text('Back'),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
*/
  Future<String?> commentUpdate(
      BuildContext context,
      Size deviceSize,
      int drilledSide,
      String drilledRow,
      String drilledHole,
      String drilledDepth,
      String drilledTime,
      String drilledComment,
      String drilledLatitude,
      String drilledLongitude,
      String drillRods,
      int drillRodsQty,
      String drillBits,
      int drillBitsQty,
      String drillCouplings,
      int drillCouplingsQty,
      String replaceDateTime) {
    return showDialog<String>(
      barrierDismissible: true,
      context: context,
      builder: (BuildContext context) => Container(
        child: StatefulBuilder(
          builder: (context, setState) {
            return Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Flexible(
                  flex: 1,
                  fit: FlexFit.tight,
                  child: ConstrainedBox(
                    constraints:
                        const BoxConstraints(maxHeight: double.infinity),
                    child: AlertDialog(
                      title: (drilledSide == 0)
                          ? Text(
                              'Update Left Row${drilledRow}:Hole${drilledHole}')
                          : Text(
                              'Update Right Row${drilledRow}:Hole${drilledHole}'),
                      content: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          SizedBox(
                            height: deviceSize.height * 0.1,
                            child: TextFormField(
                              keyboardType: TextInputType.multiline,
                              minLines: null, //1,
                              maxLines: null, //5,
                              expands: true,
                              initialValue: drilledComment,
                              onChanged: (newComment) => {
                                print('COMMENT ENTERED: ${newComment}'),
                                setState(() {
                                  drilledComment = newComment;
                                }),
                              },
                              decoration: InputDecoration(
                                labelText: "Comment",
                                enabledBorder: OutlineInputBorder(
                                    borderRadius:
                                        BorderRadius.all(Radius.circular(8)),
                                    borderSide: BorderSide(
                                        color: Colors.black, width: 0.0)),
                                border: OutlineInputBorder(),

                                // hintText: 'Enter siteType',
                                // hintStyle: TextStyle(
                                //   fontSize: 15,
                                // ), //hint text style
                                labelStyle: TextStyle(
                                    fontSize: 20,
                                    color: Colors.black,
                                    fontWeight: FontWeight.bold),
                                filled: true,
                              ),
                            ),
                          ),
                          SizedBox(height: 6.0),
                          // Spacer(),
                          SizedBox(
                            height: deviceSize.height * 0.07,
                            child: TextFormField(
                              keyboardType: TextInputType.multiline,
                              minLines: null, //1,
                              maxLines: null, //5,
                              expands: true,
                              initialValue: drilledDepth,
                              onChanged: (newAchievedDepth) => {
                                print(
                                    'ACHIEVED DEPTH ENTERED: ${newAchievedDepth}'),
                                setState(() {
                                  drilledDepth = newAchievedDepth;
                                }),
                              },
                              decoration: InputDecoration(
                                labelText: "Achieved Depth",
                                enabledBorder: OutlineInputBorder(
                                    borderRadius:
                                        BorderRadius.all(Radius.circular(8)),
                                    borderSide: BorderSide(
                                        color: Colors.black, width: 0.0)),
                                border: OutlineInputBorder(),

                                // hintText: 'Enter siteType',
                                // hintStyle: TextStyle(
                                //   fontSize: 15,
                                // ), //hint text style
                                labelStyle: TextStyle(
                                    fontSize: 20,
                                    color: Colors.black,
                                    fontWeight: FontWeight.bold),
                                filled: true,
                              ),
                            ),
                          ),
                          SizedBox(height: 6.0),
                          // Spacer(),
                          SizedBox(
                            height: deviceSize.height * 0.07,
                            child: Padding(
                              padding: EdgeInsets.fromLTRB(
                                  deviceSize.width * 0.01, 0.0, 0.01, 0.0),
                              child: drilledLatitude != '' && drilledLongitude != '' ? Text(
                                'Coordinates: \n' +
                                    '${double.parse(drilledLatitude).toStringAsFixed(10)}, ' +
                                    '${double.parse(drilledLongitude).toStringAsFixed(10)}',
                                // 'Lat: ${_latitude.toStringAsFixed(8)}, Long: ${_longitude.toStringAsFixed(8)}',
                                style: TextStyle(
                                  fontSize: 20,
                                  // fontWeight: FontWeight.bold,
                                ),) : drilledLatitude != '' ? Text(
                                'Coordinates: \n' +
                                    '${double.parse(0 as String).toStringAsFixed(10)}, ' +
                                    '${double.parse(drilledLongitude).toStringAsFixed(10)}',
                                // 'Lat: ${_latitude.toStringAsFixed(8)}, Long: ${_longitude.toStringAsFixed(8)}',
                                style: TextStyle(
                                  fontSize: 20,
                                  // fontWeight: FontWeight.bold,
                                ),) : Text(
                                'Coordinates: \n' +
                                    '${double.parse(drilledLatitude).toStringAsFixed(10)}, ' +
                                    '${double.parse(0 as String).toStringAsFixed(10)}',
                                // 'Lat: ${_latitude.toStringAsFixed(8)}, Long: ${_longitude.toStringAsFixed(8)}',
                                style: TextStyle(
                                  fontSize: 20,
                                  // fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      actions: <Widget>[
                        TextButton(
                          onPressed: () {
                            getLocation().then(
                              (value) async {
                                print('LOCATION START');
                                print(value.latitude);
                                print(value.longitude);
                                setState(
                                  () {
                                    drilledLatitude = value.latitude.toString();
                                    drilledLongitude = value.longitude.toString();
                                    print('LOCATION START: LAT: ${drilledLatitude} : LONG ${drilledLongitude}');
                                  },
                                );
                              },
                            );
                          },
                          child: const Text('Update Location'),
                        ),
                        TextButton(
                          onPressed: () async {
                            _holeIncDecUpdate = true;
                            String itemsId = drilledRow + drilledHole;
                            addRows(
                                itemsId,
                                _drillJobId,
                                drilledSide,
                                int.parse(drilledRow),
                                int.parse(drilledHole),
                                double.parse('0'),
                                double.parse(drilledDepth),
                                0,
                                0,
                                0,
                                0,
                                drilledLongitude.toString(),
                                drilledLatitude.toString(),
                                '',
                                '',
                                drilledComment,
                                drillRods.toString(),
                                drillRodsQty,
                                drillBits.toString(),
                                drillBitsQty,
                                drillCouplings.toString(),
                                drillCouplingsQty,
                                0,
                                false);
                            Navigator.pop(context, 'Done');
                          },
                          child: const Text('Done'),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}
